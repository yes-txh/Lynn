!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AlphaNumSet	byte_set.hpp	/^    static const ByteSet& AlphaNumSet()$/;"	f	class:ByteSet
AlphaSet	byte_set.hpp	/^    static const ByteSet& AlphaSet()$/;"	f	class:ByteSet
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(int n, std::string* str)$/;"	f
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(long long n, std::string* str)$/;"	f
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(long n, std::string* str)$/;"	f
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(unsigned int n, std::string* str)$/;"	f
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(unsigned long long n, std::string* str)$/;"	f
AppendIntegerToString	string_number.cpp	/^void AppendIntegerToString(unsigned long n, std::string* str)$/;"	f
AsciiSet	byte_set.hpp	/^    static const ByteSet& AsciiSet()$/;"	f	class:ByteSet
BlankSet	byte_set.hpp	/^    static const ByteSet& BlankSet()$/;"	f	class:ByteSet
BuildLookupTable	string_piece.cpp	/^static inline void BuildLookupTable(const StringPiece& characters_wanted,$/;"	f	file:
ByteSet	byte_set.hpp	/^    ByteSet()$/;"	f	class:ByteSet
ByteSet	byte_set.hpp	/^    explicit ByteSet(const Pred& pred)$/;"	f	class:ByteSet
ByteSet	byte_set.hpp	/^    explicit ByteSet(const char* str)$/;"	f	class:ByteSet
ByteSet	byte_set.hpp	/^    explicit ByteSet(const char* str, size_t length)$/;"	f	class:ByteSet
ByteSet	byte_set.hpp	/^class ByteSet$/;"	c
CEscapeInternal	algorithm.cpp	/^int CEscapeInternal(const char* src, int src_len, char* dest, int dest_len)$/;"	f
CEscapeString	algorithm.cpp	/^int CEscapeString(const char* src, int src_len, char* dest, int dest_len)$/;"	f
CEscapeString	algorithm.cpp	/^string CEscapeString(const string& src)$/;"	f
CMP_N	string_piece_test.cpp	140;"	d	file:
CMP_N	string_piece_test.cpp	65;"	d	file:
CMP_Y	string_piece_test.cpp	139;"	d	file:
CMP_Y	string_piece_test.cpp	61;"	d	file:
COMMON	Makefile	/^COMMON := ..\/..$/;"	m
COMMON_BASE_STRING_ALGORITHM_HPP	algorithm.hpp	8;"	d
COMMON_BASE_STRING_BYTE_SET_HPP	byte_set.hpp	10;"	d
COMMON_BASE_STRING_CONCAT_HPP	concat.hpp	13;"	d
COMMON_BASE_STRING_FORMAT_HPP	format.hpp	9;"	d
COMMON_BASE_STRING_STRING_ALGORITHM_HPP	string_algorithm.hpp	6;"	d
COMMON_BASE_STRING_STRING_NUMBER_HPP	string_number.hpp	7;"	d
COMMON_BASE_STRING_STRING_PIECE_HPP	string_piece.hpp	41;"	d
COMPARE_MEMORY_ONE_BYTE	algorithm.hpp	45;"	d
COMPARE_MEMORY_ONE_BYTE	algorithm.hpp	89;"	d
CUnescapeString	algorithm.cpp	/^int CUnescapeString(const char* source, char* dest)$/;"	f
CUnescapeString	algorithm.cpp	/^string CUnescapeString(const string& src)$/;"	f
CharToHex	algorithm.cpp	/^inline std::string CharToHex(unsigned char ch)$/;"	f
Clear	byte_set.hpp	/^    void Clear()$/;"	f	class:ByteSet
CompareByteString	algorithm.hpp	/^inline int CompareByteString($/;"	f
CompareByteString	algorithm.hpp	/^inline int CompareByteString(const std::string& lhs, const std::string& rhs)$/;"	f
CompareByteString	algorithm.hpp	/^inline int CompareByteString(const void* lhs, size_t lhs_len,$/;"	f
CompareMemory	algorithm.hpp	/^inline int CompareMemory(const void *b1, const void *b2, size_t len)$/;"	f
CompareMemory	algorithm.hpp	/^inline int CompareMemory(const void *b1, const void *b2, size_t len, size_t* prefix_length)$/;"	f
Convert	string_number.cpp	/^    static double Convert(const char* str, char** endptr)$/;"	f	struct:__anon2::StringToFloat
Convert	string_number.cpp	/^    static float Convert(const char* str, char** endptr)$/;"	f	struct:__anon2::StringToFloat
Convert	string_number.cpp	/^    static long Convert(const char* str, char** endptr, int base)$/;"	f	struct:__anon1::StringToNumber
Convert	string_number.cpp	/^    static long double Convert(const char* str, char** endptr)$/;"	f	struct:__anon2::StringToFloat
Convert	string_number.cpp	/^    static long long Convert(const char* str, char** endptr, int base)$/;"	f	struct:__anon1::StringToNumber
Convert	string_number.cpp	/^    static unsigned long Convert(const char* str, char** endptr, int base)$/;"	f	struct:__anon1::StringToNumber
Convert	string_number.cpp	/^    static unsigned long long Convert(const char* str, char** endptr, int base)$/;"	f	struct:__anon1::StringToNumber
Count	string_number.cpp	/^    size_t Count() const$/;"	f	class:CountOutputIterator
CountOutputIterator	string_number.cpp	/^    CountOutputIterator() : m_count(0) {}$/;"	f	class:CountOutputIterator
CountOutputIterator	string_number.cpp	/^class CountOutputIterator$/;"	c	file:
DigitSet	byte_set.hpp	/^    static const ByteSet& DigitSet()$/;"	f	class:ByteSet
DoubleToString	string_number.cpp	/^char* DoubleToString(double n, char* buffer)$/;"	f
DoubleToString	string_number.cpp	/^string DoubleToString(double value)$/;"	f
Find	byte_set.hpp	/^    bool Find(unsigned char c) const$/;"	f	class:ByteSet
FloatToString	string_number.cpp	/^char* FloatToString(float n, char* buffer)$/;"	f
FloatToString	string_number.cpp	/^string FloatToString(float value)$/;"	f
GetCommonPrefixLength	algorithm.hpp	/^inline size_t GetCommonPrefixLength($/;"	f
GetCommonPrefixLength	algorithm.hpp	/^inline size_t GetCommonPrefixLength(const std::string& lhs, const std::string& rhs)$/;"	f
HAVE_TYPE_TRAITS	string_piece.hpp	52;"	d
HasPrefixString	algorithm.hpp	/^inline bool HasPrefixString(const std::string& str, const std::string& prefix)$/;"	f
HasSuffixString	algorithm.hpp	/^inline bool HasSuffixString(const std::string& str, const std::string& suffix)$/;"	f
HexDigitToInt	string_number.hpp	/^inline int HexDigitToInt(char c)$/;"	f
HexSet	byte_set.hpp	/^    static const ByteSet& HexSet()$/;"	f	class:ByteSet
Insert	byte_set.hpp	/^    void Insert(unsigned char n)$/;"	f	class:ByteSet
InsertBytes	byte_set.hpp	/^    void InsertBytes(const char* begin, size_t length)$/;"	f	class:ByteSet
InsertPred	byte_set.hpp	/^    void InsertPred(const Pred& pred)$/;"	f	class:ByteSet
InsertString	byte_set.hpp	/^    void InsertString(const char* str)$/;"	f	class:ByteSet
Int32ToString	string_number.cpp	/^char* Int32ToString(int32_t i, char* buffer)$/;"	f
Int64ToString	string_number.cpp	/^char* Int64ToString(int64_t i, char* buffer)$/;"	f
IntegerStringLength	string_number.cpp	/^size_t IntegerStringLength(int n)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(int i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(long i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(long long i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(unsigned int i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(unsigned long i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^char* IntegerToString(unsigned long long i, char* buffer)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(int i)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(long i)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(long long i)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(unsigned int i)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(unsigned long i)$/;"	f
IntegerToString	string_number.cpp	/^string IntegerToString(unsigned long long i)$/;"	f
IsCharInString	algorithm.hpp	/^inline bool IsCharInString(char c, const std::string& str)$/;"	f
IsNaN	string_number.hpp	/^inline bool IsNaN(double value)$/;"	f
IsOctDigit	algorithm.hpp	/^inline bool IsOctDigit(char c)$/;"	f
IsValidFloatChar	string_number.hpp	/^inline bool IsValidFloatChar(char c)$/;"	f
IsWhiteString	algorithm.hpp	/^inline bool IsWhiteString(char const *str)$/;"	f
JoinStrings	algorithm.cpp	/^string JoinStrings(const vector<string>& components, const char* delim)$/;"	f
JoinStrings	algorithm.cpp	/^void JoinStrings(const vector<string>& components, const char* delim, string* result)$/;"	f
LowerSet	byte_set.hpp	/^    static const ByteSet& LowerSet()$/;"	f	class:ByteSet
LowerString	algorithm.hpp	/^inline std::string LowerString(const std::string& s)$/;"	f
LowerString	algorithm.hpp	/^inline void LowerString(std::string* s)$/;"	f
MemoryEqual	algorithm.hpp	/^inline bool MemoryEqual(const void* a1, const void* a2, size_t size)$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(double n) { return DoubleToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(float n) { return FloatToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(int n) { return IntegerToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(long long n) { return IntegerToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(long n) { return IntegerToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(unsigned int n) { return IntegerToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(unsigned long long n) { return IntegerToString(n); }$/;"	f
NumberToString	string_number.hpp	/^inline std::string NumberToString(unsigned long n) { return IntegerToString(n); }$/;"	f
OldGetCommonPrefixLength	algorithm.cpp	/^size_t OldGetCommonPrefixLength(const char* lhs, size_t lhs_len,$/;"	f
OutputInt32AsString	string_number.cpp	/^OutputIterator OutputInt32AsString(int32_t i, OutputIterator output)$/;"	f
OutputInt64AsString	string_number.cpp	/^OutputIterator OutputInt64AsString(int64_t i, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(int n, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(long long n, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(long n, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(unsigned int n, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(unsigned long long n, OutputIterator output)$/;"	f
OutputIntegerAsString	string_number.cpp	/^OutputIterator OutputIntegerAsString(unsigned long n, OutputIterator output)$/;"	f
OutputUInt32AsString	string_number.cpp	/^static OutputIterator OutputUInt32AsString(uint32_t u, OutputIterator output)$/;"	f	file:
OutputUInt64AsString	string_number.cpp	/^OutputIterator OutputUInt64AsString(uint64_t u64, OutputIterator output)$/;"	f
ParseFloatNumber	string_number.cpp	/^bool ParseFloatNumber(const char* str, T* value, char** endptr)$/;"	f	namespace:__anon2
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, double* value, char** endptr)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, float* value, char** endptr)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, int* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, long double* value, char** endptr)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, long long* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, long* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, short* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, signed char* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, unsigned char* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, unsigned int* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, unsigned long long* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, unsigned long* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.cpp	/^bool ParseNumber(const char* str, unsigned short* value, char** endptr, int base)$/;"	f
ParseNumber	string_number.hpp	/^bool ParseNumber(const std::string& str, Type* value, char** endptr)$/;"	f
ParseNumber	string_number.hpp	/^bool ParseNumber(const std::string& str, Type* value, char** endptr, int base)$/;"	f
ParseNumberT	string_number.cpp	/^bool ParseNumberT(const char* str, T* value, char** endptr, int base)$/;"	f	namespace:__anon1
PerformanceTest	concat_test.cpp	/^class PerformanceTest : public testing::Test {};$/;"	c	file:
PrintSet	byte_set.hpp	/^    static const ByteSet& PrintSet()$/;"	f	class:ByteSet
Remove	byte_set.hpp	/^    void Remove(const char* str)$/;"	f	class:ByteSet
Remove	byte_set.hpp	/^    void Remove(unsigned char n)$/;"	f	class:ByteSet
RemoveAllSubStrings	algorithm.cpp	/^string RemoveAllSubStrings(const string& s, const string& substr, bool fill_blank)$/;"	f
RemoveContinuousBlank	algorithm.cpp	/^std::string RemoveContinuousBlank(const std::string& str)$/;"	f
RemoveContinuousBlank	algorithm.cpp	/^void RemoveContinuousBlank(std::string* str)$/;"	f
RemovePred	byte_set.hpp	/^    void RemovePred(const Pred& pred)$/;"	f	class:ByteSet
RemovePrefixString	algorithm.hpp	/^inline std::string RemovePrefixString(const std::string& str, const std::string& prefix)$/;"	f
RemoveSubString	algorithm.cpp	/^string RemoveSubString(const string& s, const string& substr, bool fill_blank)$/;"	f
RemoveSuffixString	algorithm.hpp	/^inline std::string RemoveSuffixString(const std::string& str, const std::string& suffix)$/;"	f
ReplaceAll	algorithm.cpp	/^string ReplaceAll(const string& s, const string& oldsub, const string& newsub)$/;"	f
ReplaceAllChars	algorithm.cpp	/^size_t ReplaceAllChars(std::string* s, const std::string& from, char to)$/;"	f
ReplaceAllChars	algorithm.cpp	/^std::string ReplaceAllChars(const std::string& s, const std::string& from, char to)$/;"	f
ReplaceString	algorithm.cpp	/^string ReplaceString(const string& s, const string& oldsub, const string& newsub)$/;"	f
SetUp	string_number_test.cpp	/^    void SetUp()$/;"	f	class:StringToNumberPerformanceTest	file:
SpaceSet	byte_set.hpp	/^    static const ByteSet& SpaceSet()$/;"	f	class:ByteSet
SplitString	algorithm.cpp	/^void SplitString(const string& full, const char* delim, vector<string>* result)$/;"	f
SplitStringByDelimiter	algorithm.cpp	/^void SplitStringByDelimiter(const std::string& full,$/;"	f
SplitStringToIteratorUsing	algorithm.cpp	/^void SplitStringToIteratorUsing(const string& full, const char* delim, ITR& result)$/;"	f	file:
SplitUsingStringDelimiterToIterator	algorithm.cpp	/^void SplitUsingStringDelimiterToIterator(const string& full,$/;"	f	file:
StringAppend	concat.cpp	/^void StringAppend(std::string* str, double value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, float value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, int value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, long double value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, long long value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, long value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, short value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, unsigned int value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, unsigned long long value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, unsigned long value)$/;"	f
StringAppend	concat.cpp	/^void StringAppend(std::string* str, unsigned short value)$/;"	f
StringAppend	concat.hpp	/^inline void StringAppend(std::string* str, bool value)$/;"	f
StringAppend	concat.hpp	/^inline void StringAppend(std::string* str, char value)$/;"	f
StringAppend	concat.hpp	/^inline void StringAppend(std::string* str, const char* value)$/;"	f
StringAppend	concat.hpp	/^inline void StringAppend(std::string* str, const std::string& value)$/;"	f
StringAppend	concat.hpp	/^void StringAppend($/;"	f
StringAppend	concat.hpp	/^void StringAppend(std::string* str, const T& value)$/;"	f
StringAppendInteger	concat.cpp	/^static void StringAppendInteger(std::string* str, T value)$/;"	f	file:
StringConcat	concat.hpp	/^std::string StringConcat($/;"	f
StringConcatTo	concat.hpp	/^void StringConcatTo($/;"	f
StringFormat	format.cpp	/^std::string StringFormat(const char* format, ...)$/;"	f
StringFormatAppend	format.cpp	/^size_t StringFormatAppend(std::string* dst, const char* format, ...)$/;"	f
StringFormatAppendVA	format.cpp	/^size_t StringFormatAppendVA(std::string* dst, const char* format, va_list ap)$/;"	f
StringFormatTo	format.cpp	/^size_t StringFormatTo(std::string* dst, const char* format, ...)$/;"	f
StringPiece	string_piece.hpp	/^    StringPiece()$/;"	f	class:StringPiece
StringPiece	string_piece.hpp	/^    StringPiece(const char* offset, size_t len)$/;"	f	class:StringPiece
StringPiece	string_piece.hpp	/^    StringPiece(const char* str) \/\/ NOLINT(runtime\/explicit)$/;"	f	class:StringPiece
StringPiece	string_piece.hpp	/^    StringPiece(const std::string& str) \/\/ NOLINT(runtime\/explicit)$/;"	f	class:StringPiece
StringPiece	string_piece.hpp	/^    StringPiece(const unsigned char* str) \/\/ NOLINT(runtime\/explicit)$/;"	f	class:StringPiece
StringPiece	string_piece.hpp	/^class StringPiece {$/;"	c
StringToFloat	string_number.cpp	/^struct StringToFloat<double>$/;"	s	namespace:__anon2	file:
StringToFloat	string_number.cpp	/^struct StringToFloat<float>$/;"	s	namespace:__anon2	file:
StringToFloat	string_number.cpp	/^struct StringToFloat<long double>$/;"	s	namespace:__anon2	file:
StringToFloat	string_number.cpp	/^template <typename T> struct StringToFloat { };$/;"	s	namespace:__anon2	file:
StringToNumber	string_number.cpp	/^struct StringToNumber$/;"	s	namespace:__anon1	file:
StringToNumber	string_number.cpp	/^struct StringToNumber<long long>$/;"	s	namespace:__anon1	file:
StringToNumber	string_number.cpp	/^struct StringToNumber<long>$/;"	s	namespace:__anon1	file:
StringToNumber	string_number.cpp	/^struct StringToNumber<unsigned long long>$/;"	s	namespace:__anon1	file:
StringToNumber	string_number.cpp	/^struct StringToNumber<unsigned long>$/;"	s	namespace:__anon1	file:
StringToNumber	string_number.hpp	/^bool StringToNumber(const char* str, Type* value)$/;"	f
StringToNumber	string_number.hpp	/^bool StringToNumber(const char* str, Type* value, int base)$/;"	f
StringToNumber	string_number.hpp	/^bool StringToNumber(const std::string& str, Type* value)$/;"	f
StringToNumber	string_number.hpp	/^bool StringToNumber(const std::string& str, Type* value, int base)$/;"	f
StringToNumberPerformanceTest	string_number_test.cpp	/^class StringToNumberPerformanceTest : public testing::Test$/;"	c	file:
StringTrim	algorithm.cpp	/^std::string StringTrim(const std::string& str)$/;"	f
StringTrim	algorithm.cpp	/^std::string StringTrim(const std::string& str, const std::string& trim_value)$/;"	f
StringTrim	algorithm.cpp	/^void StringTrim(std::string* str)$/;"	f
StringTrim	algorithm.cpp	/^void StringTrim(std::string* str, const std::string& trim_value)$/;"	f
StringTrimLeft	algorithm.cpp	/^std::string StringTrimLeft(const std::string& str)$/;"	f
StringTrimLeft	algorithm.cpp	/^std::string StringTrimLeft(const std::string& str, const std::string& trim_value)$/;"	f
StringTrimLeft	algorithm.cpp	/^void StringTrimLeft(std::string* str)$/;"	f
StringTrimLeft	algorithm.cpp	/^void StringTrimLeft(std::string* str, const std::string& trim_value)$/;"	f
StringTrimRight	algorithm.cpp	/^std::string StringTrimRight(const std::string& str)$/;"	f
StringTrimRight	algorithm.cpp	/^std::string StringTrimRight(const std::string& str, const std::string& trim_value)$/;"	f
StringTrimRight	algorithm.cpp	/^void StringTrimRight(std::string* str)$/;"	f
StringTrimRight	algorithm.cpp	/^void StringTrimRight(std::string* str, const std::string& trim_value)$/;"	f
StripString	algorithm.cpp	/^std::string StripString(const std::string&s, const string& remove, char replacewith)$/;"	f
StripString	algorithm.cpp	/^void StripString(string* s, const char* remove, char replacewith)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, Compare)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, CompareMemory_Performance)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, ComparePerformance)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, EscapeUnEsacpe)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, GetCommonPrefixLength)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, MemoryEqual_Performance)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, RemoveSubString)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, ReplaceString)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, SplitString)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, SplitUsingStringDelimiter)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, StringTrim)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, UpperAndLowerCase)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, Util)$/;"	f
TEST	algorithm_test.cpp	/^TEST(String, memcmp_Performance)$/;"	f
TEST	byte_set_test.cpp	/^TEST(ByteSet, Empty)$/;"	f
TEST	concat_test.cpp	/^TEST(StringConcat, Append)$/;"	f
TEST	concat_test.cpp	/^TEST(StringConcat, Concat)$/;"	f
TEST	concat_test.cpp	/^TEST(StringConcat, ConcatPerformance)$/;"	f
TEST	concat_test.cpp	/^TEST(StringConcat, FormatPerformance)$/;"	f
TEST	format_test.cpp	/^TEST(String, Printf)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, IntegerToString)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, IntegerToStringBuffer)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, IsNaN)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, NumberToStringPerformance)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, StringToNumber)$/;"	f
TEST	string_number_test.cpp	/^TEST(StringNumber, UIntToHexString)$/;"	f
TEST	string_piece_test.cpp	/^TEST(StringPiece, memcmp_Performance)$/;"	f
TEST	string_piece_test.cpp	/^TEST(Test, Correction)$/;"	f
TEST_COMPARE_PERFORMANCE	string_piece_test.cpp	38;"	d	file:
TEST_F	concat_test.cpp	/^TEST_F(PerformanceTest, ProtoBuf)$/;"	f
TEST_F	concat_test.cpp	/^TEST_F(PerformanceTest, StringConcatTo)$/;"	f
TEST_F	string_number_test.cpp	/^TEST_F(StringToNumberPerformanceTest, SScanfPerformance)$/;"	f
TEST_F	string_number_test.cpp	/^TEST_F(StringToNumberPerformanceTest, StringToNumberPerformance)$/;"	f
THIRD_PARTY	Makefile	/^THIRD_PARTY := ..\/..\/..\/thirdparty$/;"	m
UInt16ToHexString	string_number.cpp	/^char* UInt16ToHexString(uint16_t value, char* buffer)$/;"	f
UInt16ToHexString	string_number.cpp	/^string UInt16ToHexString(uint16_t value)$/;"	f
UInt32ToHexString	string_number.cpp	/^char* UInt32ToHexString(uint32_t value, char* buffer)$/;"	f
UInt32ToHexString	string_number.cpp	/^string UInt32ToHexString(uint32_t value)$/;"	f
UInt32ToString	string_number.cpp	/^char* UInt32ToString(uint32_t u, char* buffer)$/;"	f
UInt64ToHexString	string_number.cpp	/^char* UInt64ToHexString(uint64_t value, char* buffer)$/;"	f
UInt64ToHexString	string_number.cpp	/^string UInt64ToHexString(uint64_t value)$/;"	f
UInt64ToString	string_number.cpp	/^char* UInt64ToString(uint64_t u64, char* buffer)$/;"	f
UIntToHexBufferInternal	string_number.cpp	/^static char *UIntToHexBufferInternal(uint64_t value, char* buffer, int num_byte)$/;"	f	file:
UpperSet	byte_set.hpp	/^    static const ByteSet& UpperSet()$/;"	f	class:ByteSet
UpperString	algorithm.hpp	/^inline std::string UpperString(const std::string& s)$/;"	f
UpperString	algorithm.hpp	/^inline void UpperString(std::string* s)$/;"	f
WriteDoubleToBuffer	string_number.cpp	/^char* WriteDoubleToBuffer(double value, char* buffer)$/;"	f
WriteFloatToBuffer	string_number.cpp	/^char* WriteFloatToBuffer(float value, char* buffer)$/;"	f
WriteHexUInt16ToBuffer	string_number.cpp	/^char* WriteHexUInt16ToBuffer(uint16_t value, char* buffer)$/;"	f
WriteHexUInt32ToBuffer	string_number.cpp	/^char* WriteHexUInt32ToBuffer(uint32_t value, char* buffer)$/;"	f
WriteHexUInt64ToBuffer	string_number.cpp	/^char* WriteHexUInt64ToBuffer(uint64_t value, char* buffer)$/;"	f
WriteInt32ToBuffer	string_number.cpp	/^char* WriteInt32ToBuffer(int32_t n, char* buffer)$/;"	f
WriteInt64ToBuffer	string_number.cpp	/^char* WriteInt64ToBuffer(int64_t n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(int n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(long long n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(long n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(unsigned int n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(unsigned long long n, char* buffer)$/;"	f
WriteIntegerToBuffer	string_number.cpp	/^char* WriteIntegerToBuffer(unsigned long n, char* buffer)$/;"	f
WriteUInt32ToBuffer	string_number.cpp	/^char* WriteUInt32ToBuffer(uint32_t n, char* buffer)$/;"	f
WriteUInt64ToBuffer	string_number.cpp	/^char* WriteUInt64ToBuffer(uint64_t n, char* buffer)$/;"	f
__type_traits	string_piece.hpp	/^template<> struct __type_traits<StringPiece> {$/;"	s
algorithm_test.sources	Makefile	/^algorithm_test.sources := algorithm_test.cpp$/;"	m
append_to_string	string_piece.hpp	/^    void append_to_string(std::string* target) const {$/;"	f	class:StringPiece
as_string	string_piece.hpp	/^    std::string as_string() const {$/;"	f	class:StringPiece
begin	string_piece.hpp	/^    iterator begin() const { return m_ptr; }$/;"	f	class:StringPiece
capacity	string_piece.hpp	/^    size_type capacity() const { return m_length; }$/;"	f	class:StringPiece
clear	string_piece.hpp	/^    void clear() { m_ptr = NULL; m_length = 0; }$/;"	f	class:StringPiece
compare	string_piece.hpp	/^    int compare(const StringPiece& x) const {$/;"	f	class:StringPiece
const_iterator	string_piece.hpp	/^    typedef const char* const_iterator;$/;"	t	class:StringPiece
const_reference	string_piece.hpp	/^    typedef const char& const_reference;$/;"	t	class:StringPiece
const_reverse_iterator	string_piece.hpp	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:StringPiece
copy	string_piece.cpp	/^size_type StringPiece::copy(char* buf, size_type n, size_type pos) const {$/;"	f	class:StringPiece
copy_to_string	string_piece.hpp	/^    void copy_to_string(std::string* target) const {$/;"	f	class:StringPiece
data	string_piece.hpp	/^    const char* data() const { return m_ptr; }$/;"	f	class:StringPiece
difference_type	string_piece.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:StringPiece
empty	string_piece.hpp	/^    bool empty() const { return m_length == 0; }$/;"	f	class:StringPiece
end	string_piece.hpp	/^    iterator end() const { return m_ptr + m_length; }$/;"	f	class:StringPiece
ends_with	string_piece.hpp	/^    bool ends_with(const StringPiece& x) const {$/;"	f	class:StringPiece
find	string_piece.cpp	/^size_type StringPiece::find(char c, size_type pos) const {$/;"	f	class:StringPiece
find	string_piece.cpp	/^size_type StringPiece::find(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
find_first_not_of	string_piece.cpp	/^size_type StringPiece::find_first_not_of(char c, size_type pos) const {$/;"	f	class:StringPiece
find_first_not_of	string_piece.cpp	/^size_type StringPiece::find_first_not_of(const StringPiece& s,$/;"	f	class:StringPiece
find_first_of	string_piece.cpp	/^size_type StringPiece::find_first_of(const StringPiece& s,$/;"	f	class:StringPiece
find_first_of	string_piece.hpp	/^    size_type find_first_of(char c, size_type pos = 0) const {$/;"	f	class:StringPiece
find_last_not_of	string_piece.cpp	/^size_type StringPiece::find_last_not_of(char c, size_type pos) const {$/;"	f	class:StringPiece
find_last_not_of	string_piece.cpp	/^size_type StringPiece::find_last_not_of(const StringPiece& s,$/;"	f	class:StringPiece
find_last_of	string_piece.cpp	/^size_type StringPiece::find_last_of(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
find_last_of	string_piece.hpp	/^    size_type find_last_of(char c, size_type pos = npos) const {$/;"	f	class:StringPiece
g_s1	algorithm_test.cpp	/^const char g_s1[] = "http:\/\/finance.qq.com\/a\/20101228\/http:\/\/finance.qq.com\/a\/20101228\/006335.htm";$/;"	v
g_s1	string_piece_test.cpp	/^char g_s1[] = "http:\/\/finance.qq.com\/a\/20101228\/http:\/\/finance.qq.com\/a\/20101228\/006335.htm";$/;"	v
g_s2	algorithm_test.cpp	/^const char g_s2[] = "http:\/\/finance.qq.com\/a\/20101228\/http:\/\/finance.qq.com\/a\/20101228\/006336.htm";$/;"	v
g_s2	string_piece_test.cpp	/^char g_s2[] = "http:\/\/finance.qq.com\/a\/20101228\/http:\/\/finance.qq.com\/a\/20101228\/006336.htm";$/;"	v
has_trivial_assignment_operator	string_piece.hpp	/^    typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits
has_trivial_copy_constructor	string_piece.hpp	/^    typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits
has_trivial_default_constructor	string_piece.hpp	/^    typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits
has_trivial_destructor	string_piece.hpp	/^    typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits
is_POD_type	string_piece.hpp	/^    typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits
iterator	string_piece.hpp	/^    typedef const char* iterator;$/;"	t	class:StringPiece
kMaxDoubleStringSize	string_number.hpp	/^const int kMaxDoubleStringSize = 32;$/;"	v
kMaxFloatStringSize	string_number.hpp	/^const int kMaxFloatStringSize = 24;$/;"	v
kMaxIntStringSize	string_number.hpp	/^DEPRECATED_BY(kMaxIntegerStringSize) const int kMaxIntStringSize = kMaxIntegerStringSize;$/;"	v
kMaxIntegerStringSize	string_number.hpp	/^const int kMaxIntegerStringSize = 32;$/;"	v
kNumber	string_number_test.cpp	/^    static const unsigned int kNumber = 0x42576010U;$/;"	m	class:StringToNumberPerformanceTest	file:
kString	string_number_test.cpp	/^    static const char kString[];$/;"	m	class:StringToNumberPerformanceTest	file:
kString	string_number_test.cpp	/^const char StringToNumberPerformanceTest::kString[] = "0x42576010";$/;"	m	class:StringToNumberPerformanceTest	file:
kTestLoopCount	concat_test.cpp	/^const int kTestLoopCount = 500000;$/;"	v
length	string_piece.hpp	/^    size_t length() const { return m_length; }$/;"	f	class:StringPiece
m_bitmap	byte_set.hpp	/^    unsigned char m_bitmap[(UCHAR_MAX + 1 + CHAR_BIT - 1) \/ CHAR_BIT];$/;"	m	class:ByteSet
m_count	string_number.cpp	/^    size_t m_count;$/;"	m	class:CountOutputIterator	file:
m_length	string_piece.hpp	/^    size_t        m_length;$/;"	m	class:StringPiece
m_ptr	string_piece.hpp	/^    const char*   m_ptr;$/;"	m	class:StringPiece
main	concat_test.cpp	/^int main(int argc, char** argv)$/;"	f
max	string_number.hpp	23;"	d
max_size	string_piece.hpp	/^    size_type max_size() const { return m_length; }$/;"	f	class:StringPiece
min	string_number.hpp	26;"	d
npos	string_piece.cpp	/^const size_type StringPiece::npos;$/;"	m	class:StringPiece	file:
npos	string_piece.hpp	/^    static const size_type npos = ~size_type(0);$/;"	m	class:StringPiece
operator !=	string_piece.hpp	/^inline bool operator!=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator &	byte_set.hpp	/^inline const ByteSet operator&(const ByteSet& lhs, const ByteSet& rhs)$/;"	f
operator &=	byte_set.hpp	/^    ByteSet& operator&=(const ByteSet& rhs)$/;"	f	class:ByteSet
operator ()	byte_set.hpp	/^    bool operator()(unsigned char c) const$/;"	f	class:ByteSet
operator *	string_number.cpp	/^    CountOutputIterator& operator*()$/;"	f	class:CountOutputIterator
operator ++	string_number.cpp	/^    CountOutputIterator operator++(int)$/;"	f	class:CountOutputIterator
operator ++	string_number.cpp	/^    CountOutputIterator& operator++()$/;"	f	class:CountOutputIterator
operator <	string_piece.hpp	/^inline bool operator<(const StringPiece& x, const StringPiece& y) {$/;"	f
operator <<	string_piece.hpp	/^inline std::ostream& operator<<(std::ostream& o, const StringPiece& piece) {$/;"	f
operator <=	string_piece.hpp	/^inline bool operator<=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator =	string_number.cpp	/^    CountOutputIterator& operator=(T value)$/;"	f	class:CountOutputIterator
operator ==	string_piece.hpp	/^inline bool operator==(const StringPiece& x, const StringPiece& y)$/;"	f
operator >	string_piece.hpp	/^inline bool operator>(const StringPiece& x, const StringPiece& y) {$/;"	f
operator >=	string_piece.hpp	/^inline bool operator>=(const StringPiece& x, const StringPiece& y) {$/;"	f
operator []	string_piece.hpp	/^    char operator[](size_type i) const { return m_ptr[i]; }$/;"	f	class:StringPiece
operator |	byte_set.hpp	/^inline const ByteSet operator|(const ByteSet& lhs, const ByteSet& rhs)$/;"	f
operator |	byte_set.hpp	/^inline const ByteSet operator|(const ByteSet& lhs, const char* rhs)$/;"	f
operator |=	byte_set.hpp	/^    ByteSet& operator|=(const ByteSet& rhs)$/;"	f	class:ByteSet
operator |=	byte_set.hpp	/^    ByteSet& operator|=(const char* rhs)$/;"	f	class:ByteSet
pointer	string_piece.hpp	/^    typedef const char* pointer;$/;"	t	class:StringPiece
project.extra_warning	Makefile	/^project.extra_warning = -Wno-float-equal$/;"	m
project.includes	Makefile	/^project.includes = $(COMMON)\/.. $(THIRD_PARTY)$/;"	m
project.ldadd	Makefile	/^project.ldadd = \\$/;"	m
rbegin	string_piece.hpp	/^    const_reverse_iterator rbegin() const {$/;"	f	class:StringPiece
reference	string_piece.hpp	/^    typedef const char& reference;$/;"	t	class:StringPiece
remove_prefix	string_piece.hpp	/^    void remove_prefix(ptrdiff_t n) {$/;"	f	class:StringPiece
remove_suffix	string_piece.hpp	/^    void remove_suffix(ptrdiff_t n) {$/;"	f	class:StringPiece
rend	string_piece.hpp	/^    const_reverse_iterator rend() const {$/;"	f	class:StringPiece
reverse_iterator	string_piece.hpp	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:StringPiece
rfind	string_piece.cpp	/^size_type StringPiece::rfind(char c, size_type pos) const {$/;"	f	class:StringPiece
rfind	string_piece.cpp	/^size_type StringPiece::rfind(const StringPiece& s, size_type pos) const {$/;"	f	class:StringPiece
set	string_piece.hpp	/^    void set(const char* buffer, size_t len) { m_ptr = buffer; m_length = len; }$/;"	f	class:StringPiece
set	string_piece.hpp	/^    void set(const char* str) {$/;"	f	class:StringPiece
set	string_piece.hpp	/^    void set(const std::string& str) {$/;"	f	class:StringPiece
set	string_piece.hpp	/^    void set(const void* buffer, size_t len) {$/;"	f	class:StringPiece
size	string_piece.hpp	/^    size_t size() const { return m_length; }$/;"	f	class:StringPiece
size_type	string_piece.cpp	/^typedef StringPiece::size_type size_type;$/;"	t	file:
size_type	string_piece.hpp	/^    typedef size_t size_type;$/;"	t	class:StringPiece
starts_with	string_piece.hpp	/^    bool starts_with(const StringPiece& x) const {$/;"	f	class:StringPiece
string_number_test.sources	Makefile	/^string_number_test.sources := string_number_test.cpp$/;"	m
string_piece_test.sources	Makefile	/^string_piece_test.sources := string_piece_test.cpp$/;"	m
substr	string_piece.cpp	/^StringPiece StringPiece::substr(size_type pos, size_type n) const {$/;"	f	class:StringPiece
two_ASCII_digits	string_number.cpp	/^static const char two_ASCII_digits[100][2] = {$/;"	v	file:
value_type	string_piece.hpp	/^    typedef char value_type;$/;"	t	class:StringPiece
