// Copyright (c) 2011, Tencent Inc.
// All rights reserved.
//
// Author: CHEN Feng <phongchen@tencent.com>
// Created: 04/30/11
// Description: string concat

#ifndef COMMON_BASE_STRING_CONCAT_HPP
#define COMMON_BASE_STRING_CONCAT_HPP
#pragma once

#include <string>
#include <sstream>
#include "common/base/static_assert.hpp"
#include "common/base/type_traits.hpp"

// default way to append
template <typename T>
void StringAppend(std::string* str, const T& value)
{
    // convert signed char or unsigned char to string is ambiguous
    // may be typedefed to int8_t or uint8_t
    // disable them
    STATIC_ASSERT((!TypeTraits::IsSame<T, signed char>::Value), "signed char is not allowed");
    STATIC_ASSERT((!TypeTraits::IsSame<T, unsigned char>::Value), "unsigned char is not allowed");

    std::ostringstream oss;
    oss << value;
    str->append(oss.str());
}

inline void StringAppend(std::string* str, const std::string& value)
{
    str->append(value);
}

inline void StringAppend(std::string* str, const char* value)
{
    str->append(value);
}

inline void StringAppend(std::string* str, char value)
{
    str->push_back(value);
}

inline void StringAppend(std::string* str, bool value)
{
    if (value)
        str->append("true", 4);
    else
        str->append("false", 5);
}

void StringAppend(std::string* str, short value);
void StringAppend(std::string* str, unsigned short value);
void StringAppend(std::string* str, int value);
void StringAppend(std::string* str, unsigned int value);
void StringAppend(std::string* str, long value);
void StringAppend(std::string* str, unsigned long value);
void StringAppend(std::string* str, long long value);
void StringAppend(std::string* str, unsigned long long value);
void StringAppend(std::string* str, float value);
void StringAppend(std::string* str, double value);
void StringAppend(std::string* str, long double value);

////////////////////////////////////////////////////////////////
// append to output param str

$var n = 32
$range i 2..n

$for i [[

$range j 1..i

template <
    $for j,
    [[typename T$j]]

>
void StringAppend(
    std::string* str,
    $for j,
    [[const T$j& a$j]]

)
{

$range j 1..i
$for j [[
    StringAppend(str, a$j);

]]
}

]]

/////////////////////////////////////////////////////////////////////////////
// concat and return result

$for i [[

$range j 1..i

template <
    $for j,
    [[typename T$j]]

>
std::string StringConcat(
    $for j,
    [[const T$j& a$j]]

)
{
    std::string result;
    StringAppend(&result, $for j, [[a$j]]);
    return result;
}

]]

/////////////////////////////////////////////////////////////////////////////
// concat to output param

$for i [[

$range j 1..i

template <
    $for j,
    [[typename T$j]]

>
void StringConcatTo(
    std::string* result,
    $for j,
    [[const T$j& a$j]]

)
{
    result->clear();
    StringAppend(result, $for j, [[a$j]]);
}

]]

#endif // COMMON_BASE_STRING_CONCAT_HPP
