// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recordio_extent_header.proto

#ifndef PROTOBUF_recordio_5fextent_5fheader_2eproto__INCLUDED
#define PROTOBUF_recordio_5fextent_5fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace common {
namespace file {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();
void protobuf_AssignDesc_recordio_5fextent_5fheader_2eproto();
void protobuf_ShutdownFile_recordio_5fextent_5fheader_2eproto();

class CompressionHeader;
class RecordIOExtentHeader;

// ===================================================================

class CompressionHeader : public ::google::protobuf::Message {
 public:
  CompressionHeader();
  virtual ~CompressionHeader();
  
  CompressionHeader(const CompressionHeader& from);
  
  inline CompressionHeader& operator=(const CompressionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressionHeader& default_instance();
  
  void Swap(CompressionHeader* other);
  
  // implements Message ----------------------------------------------
  
  CompressionHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressionHeader& from);
  void MergeFrom(const CompressionHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 compression_codec = 1;
  inline bool has_compression_codec() const;
  inline void clear_compression_codec();
  static const int kCompressionCodecFieldNumber = 1;
  inline ::google::protobuf::uint32 compression_codec() const;
  inline void set_compression_codec(::google::protobuf::uint32 value);
  
  // optional uint32 uncompressed_size = 2;
  inline bool has_uncompressed_size() const;
  inline void clear_uncompressed_size();
  static const int kUncompressedSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 uncompressed_size() const;
  inline void set_uncompressed_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:common.file.CompressionHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 compression_codec_;
  ::google::protobuf::uint32 uncompressed_size_;
  friend void  protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();
  friend void protobuf_AssignDesc_recordio_5fextent_5fheader_2eproto();
  friend void protobuf_ShutdownFile_recordio_5fextent_5fheader_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompressionHeader* default_instance_;
};
// -------------------------------------------------------------------

class RecordIOExtentHeader : public ::google::protobuf::Message {
 public:
  RecordIOExtentHeader();
  virtual ~RecordIOExtentHeader();
  
  RecordIOExtentHeader(const RecordIOExtentHeader& from);
  
  inline RecordIOExtentHeader& operator=(const RecordIOExtentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordIOExtentHeader& default_instance();
  
  void Swap(RecordIOExtentHeader* other);
  
  // implements Message ----------------------------------------------
  
  RecordIOExtentHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordIOExtentHeader& from);
  void MergeFrom(const RecordIOExtentHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .common.file.CompressionHeader compression_header = 1;
  inline bool has_compression_header() const;
  inline void clear_compression_header();
  static const int kCompressionHeaderFieldNumber = 1;
  inline const ::common::file::CompressionHeader& compression_header() const;
  inline ::common::file::CompressionHeader* mutable_compression_header();
  
  // @@protoc_insertion_point(class_scope:common.file.RecordIOExtentHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::file::CompressionHeader* compression_header_;
  friend void  protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();
  friend void protobuf_AssignDesc_recordio_5fextent_5fheader_2eproto();
  friend void protobuf_ShutdownFile_recordio_5fextent_5fheader_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecordIOExtentHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// CompressionHeader

// optional uint32 compression_codec = 1;
inline bool CompressionHeader::has_compression_codec() const {
  return _has_bit(0);
}
inline void CompressionHeader::clear_compression_codec() {
  compression_codec_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CompressionHeader::compression_codec() const {
  return compression_codec_;
}
inline void CompressionHeader::set_compression_codec(::google::protobuf::uint32 value) {
  _set_bit(0);
  compression_codec_ = value;
}

// optional uint32 uncompressed_size = 2;
inline bool CompressionHeader::has_uncompressed_size() const {
  return _has_bit(1);
}
inline void CompressionHeader::clear_uncompressed_size() {
  uncompressed_size_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CompressionHeader::uncompressed_size() const {
  return uncompressed_size_;
}
inline void CompressionHeader::set_uncompressed_size(::google::protobuf::uint32 value) {
  _set_bit(1);
  uncompressed_size_ = value;
}

// -------------------------------------------------------------------

// RecordIOExtentHeader

// optional .common.file.CompressionHeader compression_header = 1;
inline bool RecordIOExtentHeader::has_compression_header() const {
  return _has_bit(0);
}
inline void RecordIOExtentHeader::clear_compression_header() {
  if (compression_header_ != NULL) compression_header_->::common::file::CompressionHeader::Clear();
  _clear_bit(0);
}
inline const ::common::file::CompressionHeader& RecordIOExtentHeader::compression_header() const {
  return compression_header_ != NULL ? *compression_header_ : *default_instance_->compression_header_;
}
inline ::common::file::CompressionHeader* RecordIOExtentHeader::mutable_compression_header() {
  _set_bit(0);
  if (compression_header_ == NULL) compression_header_ = new ::common::file::CompressionHeader;
  return compression_header_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace common

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_recordio_5fextent_5fheader_2eproto__INCLUDED
