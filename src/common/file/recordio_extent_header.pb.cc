// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recordio_extent_header.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {
namespace file {

namespace {

const ::google::protobuf::Descriptor* CompressionHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressionHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordIOExtentHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordIOExtentHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_recordio_5fextent_5fheader_2eproto() {
  protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "recordio_extent_header.proto");
  GOOGLE_CHECK(file != NULL);
  CompressionHeader_descriptor_ = file->message_type(0);
  static const int CompressionHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressionHeader, compression_codec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressionHeader, uncompressed_size_),
  };
  CompressionHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressionHeader_descriptor_,
      CompressionHeader::default_instance_,
      CompressionHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressionHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressionHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressionHeader));
  RecordIOExtentHeader_descriptor_ = file->message_type(1);
  static const int RecordIOExtentHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordIOExtentHeader, compression_header_),
  };
  RecordIOExtentHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordIOExtentHeader_descriptor_,
      RecordIOExtentHeader::default_instance_,
      RecordIOExtentHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordIOExtentHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordIOExtentHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordIOExtentHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_recordio_5fextent_5fheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressionHeader_descriptor_, &CompressionHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordIOExtentHeader_descriptor_, &RecordIOExtentHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_recordio_5fextent_5fheader_2eproto() {
  delete CompressionHeader::default_instance_;
  delete CompressionHeader_reflection_;
  delete RecordIOExtentHeader::default_instance_;
  delete RecordIOExtentHeader_reflection_;
}

void protobuf_AddDesc_recordio_5fextent_5fheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034recordio_extent_header.proto\022\013common.f"
    "ile\"I\n\021CompressionHeader\022\031\n\021compression_"
    "codec\030\001 \001(\r\022\031\n\021uncompressed_size\030\002 \001(\r\"R"
    "\n\024RecordIOExtentHeader\022:\n\022compression_he"
    "ader\030\001 \001(\0132\036.common.file.CompressionHead"
    "er", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recordio_extent_header.proto", &protobuf_RegisterTypes);
  CompressionHeader::default_instance_ = new CompressionHeader();
  RecordIOExtentHeader::default_instance_ = new RecordIOExtentHeader();
  CompressionHeader::default_instance_->InitAsDefaultInstance();
  RecordIOExtentHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recordio_5fextent_5fheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recordio_5fextent_5fheader_2eproto {
  StaticDescriptorInitializer_recordio_5fextent_5fheader_2eproto() {
    protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();
  }
} static_descriptor_initializer_recordio_5fextent_5fheader_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CompressionHeader::kCompressionCodecFieldNumber;
const int CompressionHeader::kUncompressedSizeFieldNumber;
#endif  // !_MSC_VER

CompressionHeader::CompressionHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressionHeader::InitAsDefaultInstance() {
}

CompressionHeader::CompressionHeader(const CompressionHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressionHeader::SharedCtor() {
  _cached_size_ = 0;
  compression_codec_ = 0u;
  uncompressed_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressionHeader::~CompressionHeader() {
  SharedDtor();
}

void CompressionHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressionHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressionHeader_descriptor_;
}

const CompressionHeader& CompressionHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();  return *default_instance_;
}

CompressionHeader* CompressionHeader::default_instance_ = NULL;

CompressionHeader* CompressionHeader::New() const {
  return new CompressionHeader;
}

void CompressionHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    compression_codec_ = 0u;
    uncompressed_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 compression_codec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compression_codec_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uncompressed_size;
        break;
      }
      
      // optional uint32 uncompressed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncompressed_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncompressed_size_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 compression_codec = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compression_codec(), output);
  }
  
  // optional uint32 uncompressed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uncompressed_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressionHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 compression_codec = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compression_codec(), target);
  }
  
  // optional uint32 uncompressed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uncompressed_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressionHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 compression_codec = 1;
    if (has_compression_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compression_codec());
    }
    
    // optional uint32 uncompressed_size = 2;
    if (has_uncompressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uncompressed_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressionHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressionHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressionHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressionHeader::MergeFrom(const CompressionHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_compression_codec(from.compression_codec());
    }
    if (from._has_bit(1)) {
      set_uncompressed_size(from.uncompressed_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressionHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressionHeader::CopyFrom(const CompressionHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressionHeader::IsInitialized() const {
  
  return true;
}

void CompressionHeader::Swap(CompressionHeader* other) {
  if (other != this) {
    std::swap(compression_codec_, other->compression_codec_);
    std::swap(uncompressed_size_, other->uncompressed_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressionHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressionHeader_descriptor_;
  metadata.reflection = CompressionHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordIOExtentHeader::kCompressionHeaderFieldNumber;
#endif  // !_MSC_VER

RecordIOExtentHeader::RecordIOExtentHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordIOExtentHeader::InitAsDefaultInstance() {
  compression_header_ = const_cast< ::common::file::CompressionHeader*>(&::common::file::CompressionHeader::default_instance());
}

RecordIOExtentHeader::RecordIOExtentHeader(const RecordIOExtentHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordIOExtentHeader::SharedCtor() {
  _cached_size_ = 0;
  compression_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordIOExtentHeader::~RecordIOExtentHeader() {
  SharedDtor();
}

void RecordIOExtentHeader::SharedDtor() {
  if (this != default_instance_) {
    delete compression_header_;
  }
}

void RecordIOExtentHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordIOExtentHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordIOExtentHeader_descriptor_;
}

const RecordIOExtentHeader& RecordIOExtentHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recordio_5fextent_5fheader_2eproto();  return *default_instance_;
}

RecordIOExtentHeader* RecordIOExtentHeader::default_instance_ = NULL;

RecordIOExtentHeader* RecordIOExtentHeader::New() const {
  return new RecordIOExtentHeader;
}

void RecordIOExtentHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (compression_header_ != NULL) compression_header_->::common::file::CompressionHeader::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordIOExtentHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.file.CompressionHeader compression_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compression_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordIOExtentHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .common.file.CompressionHeader compression_header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compression_header(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordIOExtentHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .common.file.CompressionHeader compression_header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->compression_header(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordIOExtentHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.file.CompressionHeader compression_header = 1;
    if (has_compression_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compression_header());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordIOExtentHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordIOExtentHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordIOExtentHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordIOExtentHeader::MergeFrom(const RecordIOExtentHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_compression_header()->::common::file::CompressionHeader::MergeFrom(from.compression_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordIOExtentHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordIOExtentHeader::CopyFrom(const RecordIOExtentHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordIOExtentHeader::IsInitialized() const {
  
  return true;
}

void RecordIOExtentHeader::Swap(RecordIOExtentHeader* other) {
  if (other != this) {
    std::swap(compression_header_, other->compression_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordIOExtentHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordIOExtentHeader_descriptor_;
  metadata.reflection = RecordIOExtentHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace common

// @@protoc_insertion_point(global_scope)
