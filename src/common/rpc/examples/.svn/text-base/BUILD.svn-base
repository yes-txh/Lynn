# BUILD script, generated by make2build

gen_rule(
    name = 'callback_idl',
    srcs = 'callback.idl',
    outs = ['callback_proxy.h', 'callback_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

gen_rule(
    name = 'callback_demo_idl',
    srcs = 'callback_demo.idl',
    outs = ['callback_demo_proxy.h', 'callback_demo_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_binary(
    name = 'callbackclient',
    srcs = [
        'callback_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':callback_idl',
        ':callback_demo_idl'
    ]
)

cc_binary(
    name = 'callbackserver',
    srcs = [
        'callback_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc'
    ]
)

gen_rule(
    name = 'echo_idl',
    srcs = 'echo.idl',
    outs = ['echo_proxy.h', 'echo_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_test(
    name = 'echoclient',
    srcs = [
        'echo_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':echo_idl'
    ]
)

cc_binary(
    name = 'echoserver',
    srcs = [
        'echo_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':echo_idl'
    ]
)

gen_rule(
    name = 'multilisten_idl',
    srcs = 'multilisten.idl',
    outs = ['multilisten_proxy.h', 'multilisten_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_binary(
    name = 'multilisten',
    srcs = [
        'multilisten.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':multilisten_idl'
    ]
)

gen_rule(
    name = 'nested_idl',
    srcs = 'nested.idl',
    outs = ['nested_proxy.h', 'nested_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_test(
    name = 'nestedclient',
    srcs = [
        'nested_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':nested_idl'
    ]
)

cc_binary(
    name = 'nestedserver',
    srcs = [
        'nested_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':nested_idl'
    ]
)

gen_rule(
    name = 'pointer_idl',
    srcs = 'pointer.idl',
    outs = ['pointer_proxy.h', 'pointer_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_test(
    name = 'pointerclient',
    srcs = [
        'pointer_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':pointer_idl'
    ]
)

cc_binary(
    name = 'pointerserver',
    srcs = [
        'pointer_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':pointer_idl'
    ]
)

proto_library(
    name = 'addressbook_proto',
    srcs = 'addressbook.proto'
)

gen_rule(
    name = 'proto_idl',
    srcs = 'proto.idl',
    outs = ['proto_proxy.h', 'proto_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = [
        ':addressbook_proto',
        '//common/rpc/compiler:rpcc'
    ]
)

cc_test(
    name = 'protoclient',
    srcs = [
        'proto_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':proto_idl',
        ':addressbook_proto'
    ]
)

cc_binary(
    name = 'protoserver',
    srcs = [
        'proto_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':proto_idl',
        ':addressbook_proto'
    ]
)

cc_binary(
    name = 'rpcclient',
    srcs = [
        'rpc_client.cpp'
    ],
    deps = [
        '//common/rpc:rpc'
    ]
)

cc_binary(
    name = 'rpcserver',
    srcs = [
        'rpc_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc'
    ]
)

gen_rule(
    name = 'test_idl',
    srcs = 'test.idl',
    outs = ['test_proxy.h', 'test_stub.h'],
    cmd = '$BUILD_DIR/common/rpc/compiler/rpcc --input=$SRCS --output_dir=$BUILD_DIR',
    deps = '//common/rpc/compiler:rpcc'
)

cc_binary(
    name = 'testclient',
    srcs = [
        'test_client.cpp'
    ],
    deps = [
        ':test_idl',
        '//common/rpc:rpc',
        '//thirdparty/gtest:gtest'
    ]
)

cc_binary(
    name = 'test_loopback',
    srcs = [
        'test_loopback.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':test_idl'
    ]
)

cc_binary(
    name = 'testserver',
    srcs = [
        'test_server.cpp'
    ],
    deps = [
        '//common/rpc:rpc',
        ':test_idl'
    ]
)

