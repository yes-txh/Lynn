// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#ifndef PROTOBUF_rpc_5fmeta_2eproto__INCLUDED
#define PROTOBUF_rpc_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace poppy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_5fmeta_2eproto();
void protobuf_AssignDesc_rpc_5fmeta_2eproto();
void protobuf_ShutdownFile_rpc_5fmeta_2eproto();

class RpcMeta;

// ===================================================================

class RpcMeta : public ::google::protobuf::Message {
 public:
  RpcMeta();
  virtual ~RpcMeta();
  
  RpcMeta(const RpcMeta& from);
  
  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMeta& default_instance();
  
  void Swap(RpcMeta* other);
  
  // implements Message ----------------------------------------------
  
  RpcMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 sequence_id = 1;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 1;
  inline ::google::protobuf::int64 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::int64 value);
  
  // optional string method = 100;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 100;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  
  // optional bool failed = 200;
  inline bool has_failed() const;
  inline void clear_failed();
  static const int kFailedFieldNumber = 200;
  inline bool failed() const;
  inline void set_failed(bool value);
  
  // optional bool canceled = 201;
  inline bool has_canceled() const;
  inline void clear_canceled();
  static const int kCanceledFieldNumber = 201;
  inline bool canceled() const;
  inline void set_canceled(bool value);
  
  // optional int32 error_code = 202;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 202;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional string reason = 203;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 203;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  
  // @@protoc_insertion_point(class_scope:poppy.RpcMeta)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 sequence_id_;
  ::std::string* method_;
  static const ::std::string _default_method_;
  bool failed_;
  bool canceled_;
  ::google::protobuf::int32 error_code_;
  ::std::string* reason_;
  static const ::std::string _default_reason_;
  friend void  protobuf_AddDesc_rpc_5fmeta_2eproto();
  friend void protobuf_AssignDesc_rpc_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fmeta_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMeta

// required int64 sequence_id = 1;
inline bool RpcMeta::has_sequence_id() const {
  return _has_bit(0);
}
inline void RpcMeta::clear_sequence_id() {
  sequence_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 RpcMeta::sequence_id() const {
  return sequence_id_;
}
inline void RpcMeta::set_sequence_id(::google::protobuf::int64 value) {
  _set_bit(0);
  sequence_id_ = value;
}

// optional string method = 100;
inline bool RpcMeta::has_method() const {
  return _has_bit(1);
}
inline void RpcMeta::clear_method() {
  if (method_ != &_default_method_) {
    method_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RpcMeta::method() const {
  return *method_;
}
inline void RpcMeta::set_method(const ::std::string& value) {
  _set_bit(1);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMeta::set_method(const char* value) {
  _set_bit(1);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcMeta::set_method(const char* value, size_t size) {
  _set_bit(1);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMeta::mutable_method() {
  _set_bit(1);
  if (method_ == &_default_method_) {
    method_ = new ::std::string;
  }
  return method_;
}

// optional bool failed = 200;
inline bool RpcMeta::has_failed() const {
  return _has_bit(2);
}
inline void RpcMeta::clear_failed() {
  failed_ = false;
  _clear_bit(2);
}
inline bool RpcMeta::failed() const {
  return failed_;
}
inline void RpcMeta::set_failed(bool value) {
  _set_bit(2);
  failed_ = value;
}

// optional bool canceled = 201;
inline bool RpcMeta::has_canceled() const {
  return _has_bit(3);
}
inline void RpcMeta::clear_canceled() {
  canceled_ = false;
  _clear_bit(3);
}
inline bool RpcMeta::canceled() const {
  return canceled_;
}
inline void RpcMeta::set_canceled(bool value) {
  _set_bit(3);
  canceled_ = value;
}

// optional int32 error_code = 202;
inline bool RpcMeta::has_error_code() const {
  return _has_bit(4);
}
inline void RpcMeta::clear_error_code() {
  error_code_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RpcMeta::error_code() const {
  return error_code_;
}
inline void RpcMeta::set_error_code(::google::protobuf::int32 value) {
  _set_bit(4);
  error_code_ = value;
}

// optional string reason = 203;
inline bool RpcMeta::has_reason() const {
  return _has_bit(5);
}
inline void RpcMeta::clear_reason() {
  if (reason_ != &_default_reason_) {
    reason_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RpcMeta::reason() const {
  return *reason_;
}
inline void RpcMeta::set_reason(const ::std::string& value) {
  _set_bit(5);
  if (reason_ == &_default_reason_) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RpcMeta::set_reason(const char* value) {
  _set_bit(5);
  if (reason_ == &_default_reason_) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RpcMeta::set_reason(const char* value, size_t size) {
  _set_bit(5);
  if (reason_ == &_default_reason_) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMeta::mutable_reason() {
  _set_bit(5);
  if (reason_ == &_default_reason_) {
    reason_ = new ::std::string;
  }
  return reason_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace poppy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5fmeta_2eproto__INCLUDED
