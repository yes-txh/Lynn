// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streaming_service.proto

#ifndef PROTOBUF_streaming_5fservice_2eproto__INCLUDED
#define PROTOBUF_streaming_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace poppy {
namespace streaming {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_streaming_5fservice_2eproto();
void protobuf_AssignDesc_streaming_5fservice_2eproto();
void protobuf_ShutdownFile_streaming_5fservice_2eproto();

class StreamOptions;
class CreateStreamRequest;
class CreateStreamResponse;
class CloseStreamRequest;
class CloseStreamResponse;
class DownloadPacketRequest;
class DownloadPacketResponse;
class UploadPacketRequest;
class UploadPacketResponse;

enum ErrorCode {
  ERROR_UNKNOWN = -1,
  ERROR_SUCCESSFUL = 0,
  ERROR_INVALID_STREAM = 1,
  ERROR_STREAM_CLOSED = 2,
  ERROR_INVALID_PB_MESSAGE = 3,
  ERROR_END_OF_STREAM = 4,
  ERROR_RPC_FAILED = 5,
  ERROR_STREAM_TIMEOUT = 6,
  ERROR_UNEXPECTED_PACKET_ARRIVED = 7,
  ERROR_STREAM_ABORTED = 8
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR_UNKNOWN;
const ErrorCode ErrorCode_MAX = ERROR_STREAM_ABORTED;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class StreamOptions : public ::google::protobuf::Message {
 public:
  StreamOptions();
  virtual ~StreamOptions();
  
  StreamOptions(const StreamOptions& from);
  
  inline StreamOptions& operator=(const StreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamOptions& default_instance();
  
  void Swap(StreamOptions* other);
  
  // implements Message ----------------------------------------------
  
  StreamOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamOptions& from);
  void MergeFrom(const StreamOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timeout = 1 [default = 10000];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  inline ::google::protobuf::int64 timeout() const;
  inline void set_timeout(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.StreamOptions)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 timeout_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamOptions* default_instance_;
};
// -------------------------------------------------------------------

class CreateStreamRequest : public ::google::protobuf::Message {
 public:
  CreateStreamRequest();
  virtual ~CreateStreamRequest();
  
  CreateStreamRequest(const CreateStreamRequest& from);
  
  inline CreateStreamRequest& operator=(const CreateStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateStreamRequest& default_instance();
  
  void Swap(CreateStreamRequest* other);
  
  // implements Message ----------------------------------------------
  
  CreateStreamRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateStreamRequest& from);
  void MergeFrom(const CreateStreamRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .poppy.streaming.StreamOptions options = 1;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 1;
  inline const ::poppy::streaming::StreamOptions& options() const;
  inline ::poppy::streaming::StreamOptions* mutable_options();
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.CreateStreamRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::poppy::streaming::StreamOptions* options_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateStreamRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateStreamResponse : public ::google::protobuf::Message {
 public:
  CreateStreamResponse();
  virtual ~CreateStreamResponse();
  
  CreateStreamResponse(const CreateStreamResponse& from);
  
  inline CreateStreamResponse& operator=(const CreateStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateStreamResponse& default_instance();
  
  void Swap(CreateStreamResponse* other);
  
  // implements Message ----------------------------------------------
  
  CreateStreamResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateStreamResponse& from);
  void MergeFrom(const CreateStreamResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .poppy.streaming.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline poppy::streaming::ErrorCode error_code() const;
  inline void set_error_code(poppy::streaming::ErrorCode value);
  
  // optional int64 stream_id = 2;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional .poppy.streaming.StreamOptions options = 3;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 3;
  inline const ::poppy::streaming::StreamOptions& options() const;
  inline ::poppy::streaming::StreamOptions* mutable_options();
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.CreateStreamResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::google::protobuf::int64 stream_id_;
  ::poppy::streaming::StreamOptions* options_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateStreamResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloseStreamRequest : public ::google::protobuf::Message {
 public:
  CloseStreamRequest();
  virtual ~CloseStreamRequest();
  
  CloseStreamRequest(const CloseStreamRequest& from);
  
  inline CloseStreamRequest& operator=(const CloseStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseStreamRequest& default_instance();
  
  void Swap(CloseStreamRequest* other);
  
  // implements Message ----------------------------------------------
  
  CloseStreamRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseStreamRequest& from);
  void MergeFrom(const CloseStreamRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional int64 packet_id = 2;
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 2;
  inline ::google::protobuf::int64 packet_id() const;
  inline void set_packet_id(::google::protobuf::int64 value);
  
  // optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline poppy::streaming::ErrorCode error_code() const;
  inline void set_error_code(poppy::streaming::ErrorCode value);
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.CloseStreamRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 stream_id_;
  ::google::protobuf::int64 packet_id_;
  int error_code_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CloseStreamRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloseStreamResponse : public ::google::protobuf::Message {
 public:
  CloseStreamResponse();
  virtual ~CloseStreamResponse();
  
  CloseStreamResponse(const CloseStreamResponse& from);
  
  inline CloseStreamResponse& operator=(const CloseStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseStreamResponse& default_instance();
  
  void Swap(CloseStreamResponse* other);
  
  // implements Message ----------------------------------------------
  
  CloseStreamResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseStreamResponse& from);
  void MergeFrom(const CloseStreamResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .poppy.streaming.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline poppy::streaming::ErrorCode error_code() const;
  inline void set_error_code(poppy::streaming::ErrorCode value);
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.CloseStreamResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CloseStreamResponse* default_instance_;
};
// -------------------------------------------------------------------

class DownloadPacketRequest : public ::google::protobuf::Message {
 public:
  DownloadPacketRequest();
  virtual ~DownloadPacketRequest();
  
  DownloadPacketRequest(const DownloadPacketRequest& from);
  
  inline DownloadPacketRequest& operator=(const DownloadPacketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadPacketRequest& default_instance();
  
  void Swap(DownloadPacketRequest* other);
  
  // implements Message ----------------------------------------------
  
  DownloadPacketRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadPacketRequest& from);
  void MergeFrom(const DownloadPacketRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional int64 packet_id = 2;
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 2;
  inline ::google::protobuf::int64 packet_id() const;
  inline void set_packet_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.DownloadPacketRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 stream_id_;
  ::google::protobuf::int64 packet_id_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadPacketRequest* default_instance_;
};
// -------------------------------------------------------------------

class DownloadPacketResponse : public ::google::protobuf::Message {
 public:
  DownloadPacketResponse();
  virtual ~DownloadPacketResponse();
  
  DownloadPacketResponse(const DownloadPacketResponse& from);
  
  inline DownloadPacketResponse& operator=(const DownloadPacketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadPacketResponse& default_instance();
  
  void Swap(DownloadPacketResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadPacketResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadPacketResponse& from);
  void MergeFrom(const DownloadPacketResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .poppy.streaming.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline poppy::streaming::ErrorCode error_code() const;
  inline void set_error_code(poppy::streaming::ErrorCode value);
  
  // optional bytes packet_payload = 2;
  inline bool has_packet_payload() const;
  inline void clear_packet_payload();
  static const int kPacketPayloadFieldNumber = 2;
  inline const ::std::string& packet_payload() const;
  inline void set_packet_payload(const ::std::string& value);
  inline void set_packet_payload(const char* value);
  inline void set_packet_payload(const void* value, size_t size);
  inline ::std::string* mutable_packet_payload();
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.DownloadPacketResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::std::string* packet_payload_;
  static const ::std::string _default_packet_payload_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadPacketResponse* default_instance_;
};
// -------------------------------------------------------------------

class UploadPacketRequest : public ::google::protobuf::Message {
 public:
  UploadPacketRequest();
  virtual ~UploadPacketRequest();
  
  UploadPacketRequest(const UploadPacketRequest& from);
  
  inline UploadPacketRequest& operator=(const UploadPacketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadPacketRequest& default_instance();
  
  void Swap(UploadPacketRequest* other);
  
  // implements Message ----------------------------------------------
  
  UploadPacketRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadPacketRequest& from);
  void MergeFrom(const UploadPacketRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional int64 packet_id = 2;
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 2;
  inline ::google::protobuf::int64 packet_id() const;
  inline void set_packet_id(::google::protobuf::int64 value);
  
  // optional bytes packet_payload = 3;
  inline bool has_packet_payload() const;
  inline void clear_packet_payload();
  static const int kPacketPayloadFieldNumber = 3;
  inline const ::std::string& packet_payload() const;
  inline void set_packet_payload(const ::std::string& value);
  inline void set_packet_payload(const char* value);
  inline void set_packet_payload(const void* value, size_t size);
  inline ::std::string* mutable_packet_payload();
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.UploadPacketRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 stream_id_;
  ::google::protobuf::int64 packet_id_;
  ::std::string* packet_payload_;
  static const ::std::string _default_packet_payload_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadPacketRequest* default_instance_;
};
// -------------------------------------------------------------------

class UploadPacketResponse : public ::google::protobuf::Message {
 public:
  UploadPacketResponse();
  virtual ~UploadPacketResponse();
  
  UploadPacketResponse(const UploadPacketResponse& from);
  
  inline UploadPacketResponse& operator=(const UploadPacketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadPacketResponse& default_instance();
  
  void Swap(UploadPacketResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadPacketResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadPacketResponse& from);
  void MergeFrom(const UploadPacketResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .poppy.streaming.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline poppy::streaming::ErrorCode error_code() const;
  inline void set_error_code(poppy::streaming::ErrorCode value);
  
  // @@protoc_insertion_point(class_scope:poppy.streaming.UploadPacketResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  friend void  protobuf_AddDesc_streaming_5fservice_2eproto();
  friend void protobuf_AssignDesc_streaming_5fservice_2eproto();
  friend void protobuf_ShutdownFile_streaming_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadPacketResponse* default_instance_;
};
// ===================================================================

class StreamingService_Stub;

class StreamingService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StreamingService() {};
 public:
  virtual ~StreamingService();
  
  typedef StreamingService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void CreateInputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CreateStreamRequest* request,
                       ::poppy::streaming::CreateStreamResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateOutputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CreateStreamRequest* request,
                       ::poppy::streaming::CreateStreamResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CloseInputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CloseStreamRequest* request,
                       ::poppy::streaming::CloseStreamResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CloseOutputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CloseStreamRequest* request,
                       ::poppy::streaming::CloseStreamResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DownloadPacket(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::DownloadPacketRequest* request,
                       ::poppy::streaming::DownloadPacketResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UploadPacket(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::UploadPacketRequest* request,
                       ::poppy::streaming::UploadPacketResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StreamingService);
};

class StreamingService_Stub : public StreamingService {
 public:
  StreamingService_Stub(::google::protobuf::RpcChannel* channel);
  StreamingService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~StreamingService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements StreamingService ------------------------------------------
  
  void CreateInputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CreateStreamRequest* request,
                       ::poppy::streaming::CreateStreamResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateOutputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CreateStreamRequest* request,
                       ::poppy::streaming::CreateStreamResponse* response,
                       ::google::protobuf::Closure* done);
  void CloseInputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CloseStreamRequest* request,
                       ::poppy::streaming::CloseStreamResponse* response,
                       ::google::protobuf::Closure* done);
  void CloseOutputStream(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::CloseStreamRequest* request,
                       ::poppy::streaming::CloseStreamResponse* response,
                       ::google::protobuf::Closure* done);
  void DownloadPacket(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::DownloadPacketRequest* request,
                       ::poppy::streaming::DownloadPacketResponse* response,
                       ::google::protobuf::Closure* done);
  void UploadPacket(::google::protobuf::RpcController* controller,
                       const ::poppy::streaming::UploadPacketRequest* request,
                       ::poppy::streaming::UploadPacketResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StreamingService_Stub);
};


// ===================================================================


// ===================================================================

// StreamOptions

// optional int64 timeout = 1 [default = 10000];
inline bool StreamOptions::has_timeout() const {
  return _has_bit(0);
}
inline void StreamOptions::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(10000);
  _clear_bit(0);
}
inline ::google::protobuf::int64 StreamOptions::timeout() const {
  return timeout_;
}
inline void StreamOptions::set_timeout(::google::protobuf::int64 value) {
  _set_bit(0);
  timeout_ = value;
}

// -------------------------------------------------------------------

// CreateStreamRequest

// optional .poppy.streaming.StreamOptions options = 1;
inline bool CreateStreamRequest::has_options() const {
  return _has_bit(0);
}
inline void CreateStreamRequest::clear_options() {
  if (options_ != NULL) options_->::poppy::streaming::StreamOptions::Clear();
  _clear_bit(0);
}
inline const ::poppy::streaming::StreamOptions& CreateStreamRequest::options() const {
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::poppy::streaming::StreamOptions* CreateStreamRequest::mutable_options() {
  _set_bit(0);
  if (options_ == NULL) options_ = new ::poppy::streaming::StreamOptions;
  return options_;
}

// -------------------------------------------------------------------

// CreateStreamResponse

// optional .poppy.streaming.ErrorCode error_code = 1;
inline bool CreateStreamResponse::has_error_code() const {
  return _has_bit(0);
}
inline void CreateStreamResponse::clear_error_code() {
  error_code_ = -1;
  _clear_bit(0);
}
inline poppy::streaming::ErrorCode CreateStreamResponse::error_code() const {
  return static_cast< poppy::streaming::ErrorCode >(error_code_);
}
inline void CreateStreamResponse::set_error_code(poppy::streaming::ErrorCode value) {
  GOOGLE_DCHECK(poppy::streaming::ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// optional int64 stream_id = 2;
inline bool CreateStreamResponse::has_stream_id() const {
  return _has_bit(1);
}
inline void CreateStreamResponse::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CreateStreamResponse::stream_id() const {
  return stream_id_;
}
inline void CreateStreamResponse::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(1);
  stream_id_ = value;
}

// optional .poppy.streaming.StreamOptions options = 3;
inline bool CreateStreamResponse::has_options() const {
  return _has_bit(2);
}
inline void CreateStreamResponse::clear_options() {
  if (options_ != NULL) options_->::poppy::streaming::StreamOptions::Clear();
  _clear_bit(2);
}
inline const ::poppy::streaming::StreamOptions& CreateStreamResponse::options() const {
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::poppy::streaming::StreamOptions* CreateStreamResponse::mutable_options() {
  _set_bit(2);
  if (options_ == NULL) options_ = new ::poppy::streaming::StreamOptions;
  return options_;
}

// -------------------------------------------------------------------

// CloseStreamRequest

// optional int64 stream_id = 1;
inline bool CloseStreamRequest::has_stream_id() const {
  return _has_bit(0);
}
inline void CloseStreamRequest::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 CloseStreamRequest::stream_id() const {
  return stream_id_;
}
inline void CloseStreamRequest::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(0);
  stream_id_ = value;
}

// optional int64 packet_id = 2;
inline bool CloseStreamRequest::has_packet_id() const {
  return _has_bit(1);
}
inline void CloseStreamRequest::clear_packet_id() {
  packet_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CloseStreamRequest::packet_id() const {
  return packet_id_;
}
inline void CloseStreamRequest::set_packet_id(::google::protobuf::int64 value) {
  _set_bit(1);
  packet_id_ = value;
}

// optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
inline bool CloseStreamRequest::has_error_code() const {
  return _has_bit(2);
}
inline void CloseStreamRequest::clear_error_code() {
  error_code_ = 4;
  _clear_bit(2);
}
inline poppy::streaming::ErrorCode CloseStreamRequest::error_code() const {
  return static_cast< poppy::streaming::ErrorCode >(error_code_);
}
inline void CloseStreamRequest::set_error_code(poppy::streaming::ErrorCode value) {
  GOOGLE_DCHECK(poppy::streaming::ErrorCode_IsValid(value));
  _set_bit(2);
  error_code_ = value;
}

// -------------------------------------------------------------------

// CloseStreamResponse

// optional .poppy.streaming.ErrorCode error_code = 1;
inline bool CloseStreamResponse::has_error_code() const {
  return _has_bit(0);
}
inline void CloseStreamResponse::clear_error_code() {
  error_code_ = -1;
  _clear_bit(0);
}
inline poppy::streaming::ErrorCode CloseStreamResponse::error_code() const {
  return static_cast< poppy::streaming::ErrorCode >(error_code_);
}
inline void CloseStreamResponse::set_error_code(poppy::streaming::ErrorCode value) {
  GOOGLE_DCHECK(poppy::streaming::ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// -------------------------------------------------------------------

// DownloadPacketRequest

// optional int64 stream_id = 1;
inline bool DownloadPacketRequest::has_stream_id() const {
  return _has_bit(0);
}
inline void DownloadPacketRequest::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DownloadPacketRequest::stream_id() const {
  return stream_id_;
}
inline void DownloadPacketRequest::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(0);
  stream_id_ = value;
}

// optional int64 packet_id = 2;
inline bool DownloadPacketRequest::has_packet_id() const {
  return _has_bit(1);
}
inline void DownloadPacketRequest::clear_packet_id() {
  packet_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DownloadPacketRequest::packet_id() const {
  return packet_id_;
}
inline void DownloadPacketRequest::set_packet_id(::google::protobuf::int64 value) {
  _set_bit(1);
  packet_id_ = value;
}

// -------------------------------------------------------------------

// DownloadPacketResponse

// optional .poppy.streaming.ErrorCode error_code = 1;
inline bool DownloadPacketResponse::has_error_code() const {
  return _has_bit(0);
}
inline void DownloadPacketResponse::clear_error_code() {
  error_code_ = -1;
  _clear_bit(0);
}
inline poppy::streaming::ErrorCode DownloadPacketResponse::error_code() const {
  return static_cast< poppy::streaming::ErrorCode >(error_code_);
}
inline void DownloadPacketResponse::set_error_code(poppy::streaming::ErrorCode value) {
  GOOGLE_DCHECK(poppy::streaming::ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// optional bytes packet_payload = 2;
inline bool DownloadPacketResponse::has_packet_payload() const {
  return _has_bit(1);
}
inline void DownloadPacketResponse::clear_packet_payload() {
  if (packet_payload_ != &_default_packet_payload_) {
    packet_payload_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DownloadPacketResponse::packet_payload() const {
  return *packet_payload_;
}
inline void DownloadPacketResponse::set_packet_payload(const ::std::string& value) {
  _set_bit(1);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(value);
}
inline void DownloadPacketResponse::set_packet_payload(const char* value) {
  _set_bit(1);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(value);
}
inline void DownloadPacketResponse::set_packet_payload(const void* value, size_t size) {
  _set_bit(1);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadPacketResponse::mutable_packet_payload() {
  _set_bit(1);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  return packet_payload_;
}

// -------------------------------------------------------------------

// UploadPacketRequest

// optional int64 stream_id = 1;
inline bool UploadPacketRequest::has_stream_id() const {
  return _has_bit(0);
}
inline void UploadPacketRequest::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UploadPacketRequest::stream_id() const {
  return stream_id_;
}
inline void UploadPacketRequest::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(0);
  stream_id_ = value;
}

// optional int64 packet_id = 2;
inline bool UploadPacketRequest::has_packet_id() const {
  return _has_bit(1);
}
inline void UploadPacketRequest::clear_packet_id() {
  packet_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 UploadPacketRequest::packet_id() const {
  return packet_id_;
}
inline void UploadPacketRequest::set_packet_id(::google::protobuf::int64 value) {
  _set_bit(1);
  packet_id_ = value;
}

// optional bytes packet_payload = 3;
inline bool UploadPacketRequest::has_packet_payload() const {
  return _has_bit(2);
}
inline void UploadPacketRequest::clear_packet_payload() {
  if (packet_payload_ != &_default_packet_payload_) {
    packet_payload_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UploadPacketRequest::packet_payload() const {
  return *packet_payload_;
}
inline void UploadPacketRequest::set_packet_payload(const ::std::string& value) {
  _set_bit(2);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(value);
}
inline void UploadPacketRequest::set_packet_payload(const char* value) {
  _set_bit(2);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(value);
}
inline void UploadPacketRequest::set_packet_payload(const void* value, size_t size) {
  _set_bit(2);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  packet_payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadPacketRequest::mutable_packet_payload() {
  _set_bit(2);
  if (packet_payload_ == &_default_packet_payload_) {
    packet_payload_ = new ::std::string;
  }
  return packet_payload_;
}

// -------------------------------------------------------------------

// UploadPacketResponse

// optional .poppy.streaming.ErrorCode error_code = 1;
inline bool UploadPacketResponse::has_error_code() const {
  return _has_bit(0);
}
inline void UploadPacketResponse::clear_error_code() {
  error_code_ = -1;
  _clear_bit(0);
}
inline poppy::streaming::ErrorCode UploadPacketResponse::error_code() const {
  return static_cast< poppy::streaming::ErrorCode >(error_code_);
}
inline void UploadPacketResponse::set_error_code(poppy::streaming::ErrorCode value) {
  GOOGLE_DCHECK(poppy::streaming::ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace streaming
}  // namespace poppy

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< poppy::streaming::ErrorCode>() {
  return poppy::streaming::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_streaming_5fservice_2eproto__INCLUDED
