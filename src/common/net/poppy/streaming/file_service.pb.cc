// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_service.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DownloadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FileService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_5fservice_2eproto() {
  protobuf_AddDesc_file_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file_service.proto");
  GOOGLE_CHECK(file != NULL);
  DownloadFileRequest_descriptor_ = file->message_type(0);
  static const int DownloadFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequest, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequest, full_path_),
  };
  DownloadFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileRequest_descriptor_,
      DownloadFileRequest::default_instance_,
      DownloadFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileRequest));
  DownloadFileResponse_descriptor_ = file->message_type(1);
  static const int DownloadFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileResponse, successful_),
  };
  DownloadFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileResponse_descriptor_,
      DownloadFileResponse::default_instance_,
      DownloadFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileResponse));
  UploadFileRequest_descriptor_ = file->message_type(2);
  static const int UploadFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, full_path_),
  };
  UploadFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileRequest_descriptor_,
      UploadFileRequest::default_instance_,
      UploadFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileRequest));
  UploadFileResponse_descriptor_ = file->message_type(3);
  static const int UploadFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, successful_),
  };
  UploadFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileResponse_descriptor_,
      UploadFileResponse::default_instance_,
      UploadFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileResponse));
  FileService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileRequest_descriptor_, &DownloadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileResponse_descriptor_, &DownloadFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileRequest_descriptor_, &UploadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileResponse_descriptor_, &UploadFileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_5fservice_2eproto() {
  delete DownloadFileRequest::default_instance_;
  delete DownloadFileRequest_reflection_;
  delete DownloadFileResponse::default_instance_;
  delete DownloadFileResponse_reflection_;
  delete UploadFileRequest::default_instance_;
  delete UploadFileRequest_reflection_;
  delete UploadFileResponse::default_instance_;
  delete UploadFileResponse_reflection_;
}

void protobuf_AddDesc_file_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022file_service.proto\";\n\023DownloadFileRequ"
    "est\022\021\n\tstream_id\030\001 \001(\003\022\021\n\tfull_path\030\002 \001("
    "\t\"*\n\024DownloadFileResponse\022\022\n\nsuccessful\030"
    "\001 \001(\010\"9\n\021UploadFileRequest\022\021\n\tstream_id\030"
    "\001 \001(\003\022\021\n\tfull_path\030\002 \001(\t\"(\n\022UploadFileRe"
    "sponse\022\022\n\nsuccessful\030\001 \001(\0102\201\001\n\013FileServi"
    "ce\022;\n\014DownloadFile\022\024.DownloadFileRequest"
    "\032\025.DownloadFileResponse\0225\n\nUploadFile\022\022."
    "UploadFileRequest\032\023.UploadFileResponse", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_service.proto", &protobuf_RegisterTypes);
  DownloadFileRequest::default_instance_ = new DownloadFileRequest();
  DownloadFileResponse::default_instance_ = new DownloadFileResponse();
  UploadFileRequest::default_instance_ = new UploadFileRequest();
  UploadFileResponse::default_instance_ = new UploadFileResponse();
  DownloadFileRequest::default_instance_->InitAsDefaultInstance();
  DownloadFileResponse::default_instance_->InitAsDefaultInstance();
  UploadFileRequest::default_instance_->InitAsDefaultInstance();
  UploadFileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_5fservice_2eproto {
  StaticDescriptorInitializer_file_5fservice_2eproto() {
    protobuf_AddDesc_file_5fservice_2eproto();
  }
} static_descriptor_initializer_file_5fservice_2eproto_;


// ===================================================================

const ::std::string DownloadFileRequest::_default_full_path_;
#ifndef _MSC_VER
const int DownloadFileRequest::kStreamIdFieldNumber;
const int DownloadFileRequest::kFullPathFieldNumber;
#endif  // !_MSC_VER

DownloadFileRequest::DownloadFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileRequest::InitAsDefaultInstance() {
}

DownloadFileRequest::DownloadFileRequest(const DownloadFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileRequest::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  full_path_ = const_cast< ::std::string*>(&_default_full_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileRequest::~DownloadFileRequest() {
  SharedDtor();
}

void DownloadFileRequest::SharedDtor() {
  if (full_path_ != &_default_full_path_) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void DownloadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileRequest_descriptor_;
}

const DownloadFileRequest& DownloadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fservice_2eproto();  return *default_instance_;
}

DownloadFileRequest* DownloadFileRequest::default_instance_ = NULL;

DownloadFileRequest* DownloadFileRequest::New() const {
  return new DownloadFileRequest;
}

void DownloadFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (full_path_ != &_default_full_path_) {
        full_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full_path;
        break;
      }
      
      // optional string full_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }
  
  // optional string full_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }
  
  // optional string full_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional string full_path = 2;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileRequest::MergeFrom(const DownloadFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(1)) {
      set_full_path(from.full_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileRequest::CopyFrom(const DownloadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileRequest::IsInitialized() const {
  
  return true;
}

void DownloadFileRequest::Swap(DownloadFileRequest* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(full_path_, other->full_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileRequest_descriptor_;
  metadata.reflection = DownloadFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFileResponse::kSuccessfulFieldNumber;
#endif  // !_MSC_VER

DownloadFileResponse::DownloadFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileResponse::InitAsDefaultInstance() {
}

DownloadFileResponse::DownloadFileResponse(const DownloadFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileResponse::SharedCtor() {
  _cached_size_ = 0;
  successful_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileResponse::~DownloadFileResponse() {
  SharedDtor();
}

void DownloadFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileResponse_descriptor_;
}

const DownloadFileResponse& DownloadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fservice_2eproto();  return *default_instance_;
}

DownloadFileResponse* DownloadFileResponse::default_instance_ = NULL;

DownloadFileResponse* DownloadFileResponse::New() const {
  return new DownloadFileResponse;
}

void DownloadFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    successful_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool successful = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool successful = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->successful(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool successful = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->successful(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool successful = 1;
    if (has_successful()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileResponse::MergeFrom(const DownloadFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_successful(from.successful());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileResponse::CopyFrom(const DownloadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileResponse::IsInitialized() const {
  
  return true;
}

void DownloadFileResponse::Swap(DownloadFileResponse* other) {
  if (other != this) {
    std::swap(successful_, other->successful_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileResponse_descriptor_;
  metadata.reflection = DownloadFileResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UploadFileRequest::_default_full_path_;
#ifndef _MSC_VER
const int UploadFileRequest::kStreamIdFieldNumber;
const int UploadFileRequest::kFullPathFieldNumber;
#endif  // !_MSC_VER

UploadFileRequest::UploadFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileRequest::InitAsDefaultInstance() {
}

UploadFileRequest::UploadFileRequest(const UploadFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileRequest::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  full_path_ = const_cast< ::std::string*>(&_default_full_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileRequest::~UploadFileRequest() {
  SharedDtor();
}

void UploadFileRequest::SharedDtor() {
  if (full_path_ != &_default_full_path_) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileRequest_descriptor_;
}

const UploadFileRequest& UploadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fservice_2eproto();  return *default_instance_;
}

UploadFileRequest* UploadFileRequest::default_instance_ = NULL;

UploadFileRequest* UploadFileRequest::New() const {
  return new UploadFileRequest;
}

void UploadFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (full_path_ != &_default_full_path_) {
        full_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full_path;
        break;
      }
      
      // optional string full_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }
  
  // optional string full_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }
  
  // optional string full_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional string full_path = 2;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileRequest::MergeFrom(const UploadFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(1)) {
      set_full_path(from.full_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRequest::CopyFrom(const UploadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequest::IsInitialized() const {
  
  return true;
}

void UploadFileRequest::Swap(UploadFileRequest* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(full_path_, other->full_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileRequest_descriptor_;
  metadata.reflection = UploadFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileResponse::kSuccessfulFieldNumber;
#endif  // !_MSC_VER

UploadFileResponse::UploadFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileResponse::InitAsDefaultInstance() {
}

UploadFileResponse::UploadFileResponse(const UploadFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileResponse::SharedCtor() {
  _cached_size_ = 0;
  successful_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileResponse::~UploadFileResponse() {
  SharedDtor();
}

void UploadFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileResponse_descriptor_;
}

const UploadFileResponse& UploadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fservice_2eproto();  return *default_instance_;
}

UploadFileResponse* UploadFileResponse::default_instance_ = NULL;

UploadFileResponse* UploadFileResponse::New() const {
  return new UploadFileResponse;
}

void UploadFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    successful_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool successful = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool successful = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->successful(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool successful = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->successful(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool successful = 1;
    if (has_successful()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileResponse::MergeFrom(const UploadFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_successful(from.successful());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileResponse::CopyFrom(const UploadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileResponse::IsInitialized() const {
  
  return true;
}

void UploadFileResponse::Swap(UploadFileResponse* other) {
  if (other != this) {
    std::swap(successful_, other->successful_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileResponse_descriptor_;
  metadata.reflection = UploadFileResponse_reflection_;
  return metadata;
}


// ===================================================================

FileService::~FileService() {}

const ::google::protobuf::ServiceDescriptor* FileService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FileService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileService_descriptor_;
}

void FileService::DownloadFile(::google::protobuf::RpcController* controller,
                         const ::DownloadFileRequest*,
                         ::DownloadFileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DownloadFile() not implemented.");
  done->Run();
}

void FileService::UploadFile(::google::protobuf::RpcController* controller,
                         const ::UploadFileRequest*,
                         ::UploadFileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadFile() not implemented.");
  done->Run();
}

void FileService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FileService_descriptor_);
  switch(method->index()) {
    case 0:
      DownloadFile(controller,
             ::google::protobuf::down_cast<const ::DownloadFileRequest*>(request),
             ::google::protobuf::down_cast< ::DownloadFileResponse*>(response),
             done);
      break;
    case 1:
      UploadFile(controller,
             ::google::protobuf::down_cast<const ::UploadFileRequest*>(request),
             ::google::protobuf::down_cast< ::UploadFileResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FileService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DownloadFileRequest::default_instance();
    case 1:
      return ::UploadFileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FileService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DownloadFileResponse::default_instance();
    case 1:
      return ::UploadFileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FileService_Stub::FileService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileService_Stub::FileService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FileService_Stub::~FileService_Stub() {
  if (owns_channel_) delete channel_;
}

void FileService_Stub::DownloadFile(::google::protobuf::RpcController* controller,
                              const ::DownloadFileRequest* request,
                              ::DownloadFileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FileService_Stub::UploadFile(::google::protobuf::RpcController* controller,
                              const ::UploadFileRequest* request,
                              ::UploadFileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
