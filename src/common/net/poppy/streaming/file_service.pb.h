// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_service.proto

#ifndef PROTOBUF_file_5fservice_2eproto__INCLUDED
#define PROTOBUF_file_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fservice_2eproto();
void protobuf_AssignDesc_file_5fservice_2eproto();
void protobuf_ShutdownFile_file_5fservice_2eproto();

class DownloadFileRequest;
class DownloadFileResponse;
class UploadFileRequest;
class UploadFileResponse;

// ===================================================================

class DownloadFileRequest : public ::google::protobuf::Message {
 public:
  DownloadFileRequest();
  virtual ~DownloadFileRequest();
  
  DownloadFileRequest(const DownloadFileRequest& from);
  
  inline DownloadFileRequest& operator=(const DownloadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFileRequest& default_instance();
  
  void Swap(DownloadFileRequest* other);
  
  // implements Message ----------------------------------------------
  
  DownloadFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadFileRequest& from);
  void MergeFrom(const DownloadFileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional string full_path = 2;
  inline bool has_full_path() const;
  inline void clear_full_path();
  static const int kFullPathFieldNumber = 2;
  inline const ::std::string& full_path() const;
  inline void set_full_path(const ::std::string& value);
  inline void set_full_path(const char* value);
  inline void set_full_path(const char* value, size_t size);
  inline ::std::string* mutable_full_path();
  
  // @@protoc_insertion_point(class_scope:DownloadFileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 stream_id_;
  ::std::string* full_path_;
  static const ::std::string _default_full_path_;
  friend void  protobuf_AddDesc_file_5fservice_2eproto();
  friend void protobuf_AssignDesc_file_5fservice_2eproto();
  friend void protobuf_ShutdownFile_file_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class DownloadFileResponse : public ::google::protobuf::Message {
 public:
  DownloadFileResponse();
  virtual ~DownloadFileResponse();
  
  DownloadFileResponse(const DownloadFileResponse& from);
  
  inline DownloadFileResponse& operator=(const DownloadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFileResponse& default_instance();
  
  void Swap(DownloadFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  DownloadFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadFileResponse& from);
  void MergeFrom(const DownloadFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool successful = 1;
  inline bool has_successful() const;
  inline void clear_successful();
  static const int kSuccessfulFieldNumber = 1;
  inline bool successful() const;
  inline void set_successful(bool value);
  
  // @@protoc_insertion_point(class_scope:DownloadFileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool successful_;
  friend void  protobuf_AddDesc_file_5fservice_2eproto();
  friend void protobuf_AssignDesc_file_5fservice_2eproto();
  friend void protobuf_ShutdownFile_file_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class UploadFileRequest : public ::google::protobuf::Message {
 public:
  UploadFileRequest();
  virtual ~UploadFileRequest();
  
  UploadFileRequest(const UploadFileRequest& from);
  
  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadFileRequest& default_instance();
  
  void Swap(UploadFileRequest* other);
  
  // implements Message ----------------------------------------------
  
  UploadFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadFileRequest& from);
  void MergeFrom(const UploadFileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // optional string full_path = 2;
  inline bool has_full_path() const;
  inline void clear_full_path();
  static const int kFullPathFieldNumber = 2;
  inline const ::std::string& full_path() const;
  inline void set_full_path(const ::std::string& value);
  inline void set_full_path(const char* value);
  inline void set_full_path(const char* value, size_t size);
  inline ::std::string* mutable_full_path();
  
  // @@protoc_insertion_point(class_scope:UploadFileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 stream_id_;
  ::std::string* full_path_;
  static const ::std::string _default_full_path_;
  friend void  protobuf_AddDesc_file_5fservice_2eproto();
  friend void protobuf_AssignDesc_file_5fservice_2eproto();
  friend void protobuf_ShutdownFile_file_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class UploadFileResponse : public ::google::protobuf::Message {
 public:
  UploadFileResponse();
  virtual ~UploadFileResponse();
  
  UploadFileResponse(const UploadFileResponse& from);
  
  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadFileResponse& default_instance();
  
  void Swap(UploadFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  UploadFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadFileResponse& from);
  void MergeFrom(const UploadFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool successful = 1;
  inline bool has_successful() const;
  inline void clear_successful();
  static const int kSuccessfulFieldNumber = 1;
  inline bool successful() const;
  inline void set_successful(bool value);
  
  // @@protoc_insertion_point(class_scope:UploadFileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool successful_;
  friend void  protobuf_AddDesc_file_5fservice_2eproto();
  friend void protobuf_AssignDesc_file_5fservice_2eproto();
  friend void protobuf_ShutdownFile_file_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UploadFileResponse* default_instance_;
};
// ===================================================================

class FileService_Stub;

class FileService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileService() {};
 public:
  virtual ~FileService();
  
  typedef FileService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void DownloadFile(::google::protobuf::RpcController* controller,
                       const ::DownloadFileRequest* request,
                       ::DownloadFileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UploadFile(::google::protobuf::RpcController* controller,
                       const ::UploadFileRequest* request,
                       ::UploadFileResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService);
};

class FileService_Stub : public FileService {
 public:
  FileService_Stub(::google::protobuf::RpcChannel* channel);
  FileService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FileService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements FileService ------------------------------------------
  
  void DownloadFile(::google::protobuf::RpcController* controller,
                       const ::DownloadFileRequest* request,
                       ::DownloadFileResponse* response,
                       ::google::protobuf::Closure* done);
  void UploadFile(::google::protobuf::RpcController* controller,
                       const ::UploadFileRequest* request,
                       ::UploadFileResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService_Stub);
};


// ===================================================================


// ===================================================================

// DownloadFileRequest

// optional int64 stream_id = 1;
inline bool DownloadFileRequest::has_stream_id() const {
  return _has_bit(0);
}
inline void DownloadFileRequest::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DownloadFileRequest::stream_id() const {
  return stream_id_;
}
inline void DownloadFileRequest::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(0);
  stream_id_ = value;
}

// optional string full_path = 2;
inline bool DownloadFileRequest::has_full_path() const {
  return _has_bit(1);
}
inline void DownloadFileRequest::clear_full_path() {
  if (full_path_ != &_default_full_path_) {
    full_path_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DownloadFileRequest::full_path() const {
  return *full_path_;
}
inline void DownloadFileRequest::set_full_path(const ::std::string& value) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void DownloadFileRequest::set_full_path(const char* value) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void DownloadFileRequest::set_full_path(const char* value, size_t size) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadFileRequest::mutable_full_path() {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  return full_path_;
}

// -------------------------------------------------------------------

// DownloadFileResponse

// optional bool successful = 1;
inline bool DownloadFileResponse::has_successful() const {
  return _has_bit(0);
}
inline void DownloadFileResponse::clear_successful() {
  successful_ = false;
  _clear_bit(0);
}
inline bool DownloadFileResponse::successful() const {
  return successful_;
}
inline void DownloadFileResponse::set_successful(bool value) {
  _set_bit(0);
  successful_ = value;
}

// -------------------------------------------------------------------

// UploadFileRequest

// optional int64 stream_id = 1;
inline bool UploadFileRequest::has_stream_id() const {
  return _has_bit(0);
}
inline void UploadFileRequest::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UploadFileRequest::stream_id() const {
  return stream_id_;
}
inline void UploadFileRequest::set_stream_id(::google::protobuf::int64 value) {
  _set_bit(0);
  stream_id_ = value;
}

// optional string full_path = 2;
inline bool UploadFileRequest::has_full_path() const {
  return _has_bit(1);
}
inline void UploadFileRequest::clear_full_path() {
  if (full_path_ != &_default_full_path_) {
    full_path_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UploadFileRequest::full_path() const {
  return *full_path_;
}
inline void UploadFileRequest::set_full_path(const ::std::string& value) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void UploadFileRequest::set_full_path(const char* value) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void UploadFileRequest::set_full_path(const char* value, size_t size) {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UploadFileRequest::mutable_full_path() {
  _set_bit(1);
  if (full_path_ == &_default_full_path_) {
    full_path_ = new ::std::string;
  }
  return full_path_;
}

// -------------------------------------------------------------------

// UploadFileResponse

// optional bool successful = 1;
inline bool UploadFileResponse::has_successful() const {
  return _has_bit(0);
}
inline void UploadFileResponse::clear_successful() {
  successful_ = false;
  _clear_bit(0);
}
inline bool UploadFileResponse::successful() const {
  return successful_;
}
inline void UploadFileResponse::set_successful(bool value) {
  _set_bit(0);
  successful_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fservice_2eproto__INCLUDED
