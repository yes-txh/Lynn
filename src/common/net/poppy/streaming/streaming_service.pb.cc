// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "streaming_service.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace poppy {
namespace streaming {

namespace {

const ::google::protobuf::Descriptor* StreamOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStreamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStreamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseStreamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseStreamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseStreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseStreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadPacketRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadPacketRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadPacketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadPacketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadPacketRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadPacketRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadPacketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadPacketResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* StreamingService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_streaming_5fservice_2eproto() {
  protobuf_AddDesc_streaming_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "streaming_service.proto");
  GOOGLE_CHECK(file != NULL);
  StreamOptions_descriptor_ = file->message_type(0);
  static const int StreamOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamOptions, timeout_),
  };
  StreamOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamOptions_descriptor_,
      StreamOptions::default_instance_,
      StreamOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamOptions));
  CreateStreamRequest_descriptor_ = file->message_type(1);
  static const int CreateStreamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRequest, options_),
  };
  CreateStreamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStreamRequest_descriptor_,
      CreateStreamRequest::default_instance_,
      CreateStreamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStreamRequest));
  CreateStreamResponse_descriptor_ = file->message_type(2);
  static const int CreateStreamResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamResponse, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamResponse, options_),
  };
  CreateStreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStreamResponse_descriptor_,
      CreateStreamResponse::default_instance_,
      CreateStreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStreamResponse));
  CloseStreamRequest_descriptor_ = file->message_type(3);
  static const int CloseStreamRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamRequest, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamRequest, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamRequest, error_code_),
  };
  CloseStreamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseStreamRequest_descriptor_,
      CloseStreamRequest::default_instance_,
      CloseStreamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseStreamRequest));
  CloseStreamResponse_descriptor_ = file->message_type(4);
  static const int CloseStreamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamResponse, error_code_),
  };
  CloseStreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseStreamResponse_descriptor_,
      CloseStreamResponse::default_instance_,
      CloseStreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseStreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseStreamResponse));
  DownloadPacketRequest_descriptor_ = file->message_type(5);
  static const int DownloadPacketRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketRequest, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketRequest, packet_id_),
  };
  DownloadPacketRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadPacketRequest_descriptor_,
      DownloadPacketRequest::default_instance_,
      DownloadPacketRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadPacketRequest));
  DownloadPacketResponse_descriptor_ = file->message_type(6);
  static const int DownloadPacketResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketResponse, packet_payload_),
  };
  DownloadPacketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadPacketResponse_descriptor_,
      DownloadPacketResponse::default_instance_,
      DownloadPacketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadPacketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadPacketResponse));
  UploadPacketRequest_descriptor_ = file->message_type(7);
  static const int UploadPacketRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketRequest, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketRequest, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketRequest, packet_payload_),
  };
  UploadPacketRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadPacketRequest_descriptor_,
      UploadPacketRequest::default_instance_,
      UploadPacketRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadPacketRequest));
  UploadPacketResponse_descriptor_ = file->message_type(8);
  static const int UploadPacketResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketResponse, error_code_),
  };
  UploadPacketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadPacketResponse_descriptor_,
      UploadPacketResponse::default_instance_,
      UploadPacketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadPacketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadPacketResponse));
  ErrorCode_descriptor_ = file->enum_type(0);
  StreamingService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_streaming_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamOptions_descriptor_, &StreamOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStreamRequest_descriptor_, &CreateStreamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStreamResponse_descriptor_, &CreateStreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseStreamRequest_descriptor_, &CloseStreamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseStreamResponse_descriptor_, &CloseStreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadPacketRequest_descriptor_, &DownloadPacketRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadPacketResponse_descriptor_, &DownloadPacketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadPacketRequest_descriptor_, &UploadPacketRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadPacketResponse_descriptor_, &UploadPacketResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_streaming_5fservice_2eproto() {
  delete StreamOptions::default_instance_;
  delete StreamOptions_reflection_;
  delete CreateStreamRequest::default_instance_;
  delete CreateStreamRequest_reflection_;
  delete CreateStreamResponse::default_instance_;
  delete CreateStreamResponse_reflection_;
  delete CloseStreamRequest::default_instance_;
  delete CloseStreamRequest_reflection_;
  delete CloseStreamResponse::default_instance_;
  delete CloseStreamResponse_reflection_;
  delete DownloadPacketRequest::default_instance_;
  delete DownloadPacketRequest_reflection_;
  delete DownloadPacketResponse::default_instance_;
  delete DownloadPacketResponse_reflection_;
  delete UploadPacketRequest::default_instance_;
  delete UploadPacketRequest_reflection_;
  delete UploadPacketResponse::default_instance_;
  delete UploadPacketResponse_reflection_;
}

void protobuf_AddDesc_streaming_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027streaming_service.proto\022\017poppy.streami"
    "ng\"\'\n\rStreamOptions\022\026\n\007timeout\030\001 \001(\003:\00510"
    "000\"F\n\023CreateStreamRequest\022/\n\007options\030\001 "
    "\001(\0132\036.poppy.streaming.StreamOptions\"\212\001\n\024"
    "CreateStreamResponse\022.\n\nerror_code\030\001 \001(\016"
    "2\032.poppy.streaming.ErrorCode\022\021\n\tstream_i"
    "d\030\002 \001(\003\022/\n\007options\030\003 \001(\0132\036.poppy.streami"
    "ng.StreamOptions\"\177\n\022CloseStreamRequest\022\021"
    "\n\tstream_id\030\001 \001(\003\022\021\n\tpacket_id\030\002 \001(\003\022C\n\n"
    "error_code\030\003 \001(\0162\032.poppy.streaming.Error"
    "Code:\023ERROR_END_OF_STREAM\"E\n\023CloseStream"
    "Response\022.\n\nerror_code\030\001 \001(\0162\032.poppy.str"
    "eaming.ErrorCode\"=\n\025DownloadPacketReques"
    "t\022\021\n\tstream_id\030\001 \001(\003\022\021\n\tpacket_id\030\002 \001(\003\""
    "`\n\026DownloadPacketResponse\022.\n\nerror_code\030"
    "\001 \001(\0162\032.poppy.streaming.ErrorCode\022\026\n\016pac"
    "ket_payload\030\002 \001(\014\"S\n\023UploadPacketRequest"
    "\022\021\n\tstream_id\030\001 \001(\003\022\021\n\tpacket_id\030\002 \001(\003\022\026"
    "\n\016packet_payload\030\003 \001(\014\"F\n\024UploadPacketRe"
    "sponse\022.\n\nerror_code\030\001 \001(\0162\032.poppy.strea"
    "ming.ErrorCode*\226\002\n\tErrorCode\022\032\n\rERROR_UN"
    "KNOWN\020\377\377\377\377\377\377\377\377\377\001\022\024\n\020ERROR_SUCCESSFUL\020\000\022\030"
    "\n\024ERROR_INVALID_STREAM\020\001\022\027\n\023ERROR_STREAM"
    "_CLOSED\020\002\022\034\n\030ERROR_INVALID_PB_MESSAGE\020\003\022"
    "\027\n\023ERROR_END_OF_STREAM\020\004\022\024\n\020ERROR_RPC_FA"
    "ILED\020\005\022\030\n\024ERROR_STREAM_TIMEOUT\020\006\022#\n\037ERRO"
    "R_UNEXPECTED_PACKET_ARRIVED\020\007\022\030\n\024ERROR_S"
    "TREAM_ABORTED\020\0102\326\004\n\020StreamingService\022`\n\021"
    "CreateInputStream\022$.poppy.streaming.Crea"
    "teStreamRequest\032%.poppy.streaming.Create"
    "StreamResponse\022a\n\022CreateOutputStream\022$.p"
    "oppy.streaming.CreateStreamRequest\032%.pop"
    "py.streaming.CreateStreamResponse\022]\n\020Clo"
    "seInputStream\022#.poppy.streaming.CloseStr"
    "eamRequest\032$.poppy.streaming.CloseStream"
    "Response\022^\n\021CloseOutputStream\022#.poppy.st"
    "reaming.CloseStreamRequest\032$.poppy.strea"
    "ming.CloseStreamResponse\022a\n\016DownloadPack"
    "et\022&.poppy.streaming.DownloadPacketReque"
    "st\032\'.poppy.streaming.DownloadPacketRespo"
    "nse\022[\n\014UploadPacket\022$.poppy.streaming.Up"
    "loadPacketRequest\032%.poppy.streaming.Uplo"
    "adPacketResponse", 1696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "streaming_service.proto", &protobuf_RegisterTypes);
  StreamOptions::default_instance_ = new StreamOptions();
  CreateStreamRequest::default_instance_ = new CreateStreamRequest();
  CreateStreamResponse::default_instance_ = new CreateStreamResponse();
  CloseStreamRequest::default_instance_ = new CloseStreamRequest();
  CloseStreamResponse::default_instance_ = new CloseStreamResponse();
  DownloadPacketRequest::default_instance_ = new DownloadPacketRequest();
  DownloadPacketResponse::default_instance_ = new DownloadPacketResponse();
  UploadPacketRequest::default_instance_ = new UploadPacketRequest();
  UploadPacketResponse::default_instance_ = new UploadPacketResponse();
  StreamOptions::default_instance_->InitAsDefaultInstance();
  CreateStreamRequest::default_instance_->InitAsDefaultInstance();
  CreateStreamResponse::default_instance_->InitAsDefaultInstance();
  CloseStreamRequest::default_instance_->InitAsDefaultInstance();
  CloseStreamResponse::default_instance_->InitAsDefaultInstance();
  DownloadPacketRequest::default_instance_->InitAsDefaultInstance();
  DownloadPacketResponse::default_instance_->InitAsDefaultInstance();
  UploadPacketRequest::default_instance_->InitAsDefaultInstance();
  UploadPacketResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_streaming_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_streaming_5fservice_2eproto {
  StaticDescriptorInitializer_streaming_5fservice_2eproto() {
    protobuf_AddDesc_streaming_5fservice_2eproto();
  }
} static_descriptor_initializer_streaming_5fservice_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StreamOptions::kTimeoutFieldNumber;
#endif  // !_MSC_VER

StreamOptions::StreamOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamOptions::InitAsDefaultInstance() {
}

StreamOptions::StreamOptions(const StreamOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamOptions::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = GOOGLE_LONGLONG(10000);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamOptions::~StreamOptions() {
  SharedDtor();
}

void StreamOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamOptions_descriptor_;
}

const StreamOptions& StreamOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

StreamOptions* StreamOptions::default_instance_ = NULL;

StreamOptions* StreamOptions::New() const {
  return new StreamOptions;
}

void StreamOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = GOOGLE_LONGLONG(10000);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timeout = 1 [default = 10000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timeout = 1 [default = 10000];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timeout = 1 [default = 10000];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timeout = 1 [default = 10000];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamOptions::MergeFrom(const StreamOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamOptions::CopyFrom(const StreamOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOptions::IsInitialized() const {
  
  return true;
}

void StreamOptions::Swap(StreamOptions* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamOptions_descriptor_;
  metadata.reflection = StreamOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStreamRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

CreateStreamRequest::CreateStreamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStreamRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::poppy::streaming::StreamOptions*>(&::poppy::streaming::StreamOptions::default_instance());
}

CreateStreamRequest::CreateStreamRequest(const CreateStreamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStreamRequest::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStreamRequest::~CreateStreamRequest() {
  SharedDtor();
}

void CreateStreamRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void CreateStreamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStreamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStreamRequest_descriptor_;
}

const CreateStreamRequest& CreateStreamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

CreateStreamRequest* CreateStreamRequest::default_instance_ = NULL;

CreateStreamRequest* CreateStreamRequest::New() const {
  return new CreateStreamRequest;
}

void CreateStreamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (options_ != NULL) options_->::poppy::streaming::StreamOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStreamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.streaming.StreamOptions options = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStreamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .poppy.streaming.StreamOptions options = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStreamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .poppy.streaming.StreamOptions options = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->options(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStreamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .poppy.streaming.StreamOptions options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStreamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStreamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStreamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStreamRequest::MergeFrom(const CreateStreamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_options()->::poppy::streaming::StreamOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStreamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamRequest::CopyFrom(const CreateStreamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamRequest::IsInitialized() const {
  
  return true;
}

void CreateStreamRequest::Swap(CreateStreamRequest* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStreamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStreamRequest_descriptor_;
  metadata.reflection = CreateStreamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStreamResponse::kErrorCodeFieldNumber;
const int CreateStreamResponse::kStreamIdFieldNumber;
const int CreateStreamResponse::kOptionsFieldNumber;
#endif  // !_MSC_VER

CreateStreamResponse::CreateStreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStreamResponse::InitAsDefaultInstance() {
  options_ = const_cast< ::poppy::streaming::StreamOptions*>(&::poppy::streaming::StreamOptions::default_instance());
}

CreateStreamResponse::CreateStreamResponse(const CreateStreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStreamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = -1;
  stream_id_ = GOOGLE_LONGLONG(0);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStreamResponse::~CreateStreamResponse() {
  SharedDtor();
}

void CreateStreamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void CreateStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStreamResponse_descriptor_;
}

const CreateStreamResponse& CreateStreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

CreateStreamResponse* CreateStreamResponse::default_instance_ = NULL;

CreateStreamResponse* CreateStreamResponse::New() const {
  return new CreateStreamResponse;
}

void CreateStreamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = -1;
    stream_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (options_ != NULL) options_->::poppy::streaming::StreamOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.streaming.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (poppy::streaming::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< poppy::streaming::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }
      
      // optional int64 stream_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }
      
      // optional .poppy.streaming.StreamOptions options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  // optional int64 stream_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stream_id(), output);
  }
  
  // optional .poppy.streaming.StreamOptions options = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->options(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  // optional int64 stream_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stream_id(), target);
  }
  
  // optional .poppy.streaming.StreamOptions options = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->options(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStreamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .poppy.streaming.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
    // optional int64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional .poppy.streaming.StreamOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStreamResponse::MergeFrom(const CreateStreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
    if (from._has_bit(1)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(2)) {
      mutable_options()->::poppy::streaming::StreamOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamResponse::CopyFrom(const CreateStreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamResponse::IsInitialized() const {
  
  return true;
}

void CreateStreamResponse::Swap(CreateStreamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStreamResponse_descriptor_;
  metadata.reflection = CreateStreamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseStreamRequest::kStreamIdFieldNumber;
const int CloseStreamRequest::kPacketIdFieldNumber;
const int CloseStreamRequest::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CloseStreamRequest::CloseStreamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseStreamRequest::InitAsDefaultInstance() {
}

CloseStreamRequest::CloseStreamRequest(const CloseStreamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseStreamRequest::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  packet_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseStreamRequest::~CloseStreamRequest() {
  SharedDtor();
}

void CloseStreamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseStreamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseStreamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseStreamRequest_descriptor_;
}

const CloseStreamRequest& CloseStreamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

CloseStreamRequest* CloseStreamRequest::default_instance_ = NULL;

CloseStreamRequest* CloseStreamRequest::New() const {
  return new CloseStreamRequest;
}

void CloseStreamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = GOOGLE_LONGLONG(0);
    packet_id_ = GOOGLE_LONGLONG(0);
    error_code_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseStreamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_id;
        break;
      }
      
      // optional int64 packet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }
      
      // optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (poppy::streaming::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< poppy::streaming::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseStreamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_id(), output);
  }
  
  // optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseStreamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packet_id(), target);
  }
  
  // optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseStreamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional int64 packet_id = 2;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_id());
    }
    
    // optional .poppy.streaming.ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseStreamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseStreamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseStreamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseStreamRequest::MergeFrom(const CloseStreamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(1)) {
      set_packet_id(from.packet_id());
    }
    if (from._has_bit(2)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseStreamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseStreamRequest::CopyFrom(const CloseStreamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseStreamRequest::IsInitialized() const {
  
  return true;
}

void CloseStreamRequest::Swap(CloseStreamRequest* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(packet_id_, other->packet_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseStreamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseStreamRequest_descriptor_;
  metadata.reflection = CloseStreamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseStreamResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CloseStreamResponse::CloseStreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseStreamResponse::InitAsDefaultInstance() {
}

CloseStreamResponse::CloseStreamResponse(const CloseStreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseStreamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseStreamResponse::~CloseStreamResponse() {
  SharedDtor();
}

void CloseStreamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseStreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseStreamResponse_descriptor_;
}

const CloseStreamResponse& CloseStreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

CloseStreamResponse* CloseStreamResponse::default_instance_ = NULL;

CloseStreamResponse* CloseStreamResponse::New() const {
  return new CloseStreamResponse;
}

void CloseStreamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.streaming.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (poppy::streaming::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< poppy::streaming::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseStreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseStreamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .poppy.streaming.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseStreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseStreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseStreamResponse::MergeFrom(const CloseStreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseStreamResponse::CopyFrom(const CloseStreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseStreamResponse::IsInitialized() const {
  
  return true;
}

void CloseStreamResponse::Swap(CloseStreamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseStreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseStreamResponse_descriptor_;
  metadata.reflection = CloseStreamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadPacketRequest::kStreamIdFieldNumber;
const int DownloadPacketRequest::kPacketIdFieldNumber;
#endif  // !_MSC_VER

DownloadPacketRequest::DownloadPacketRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadPacketRequest::InitAsDefaultInstance() {
}

DownloadPacketRequest::DownloadPacketRequest(const DownloadPacketRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadPacketRequest::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  packet_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadPacketRequest::~DownloadPacketRequest() {
  SharedDtor();
}

void DownloadPacketRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadPacketRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadPacketRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadPacketRequest_descriptor_;
}

const DownloadPacketRequest& DownloadPacketRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

DownloadPacketRequest* DownloadPacketRequest::default_instance_ = NULL;

DownloadPacketRequest* DownloadPacketRequest::New() const {
  return new DownloadPacketRequest;
}

void DownloadPacketRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = GOOGLE_LONGLONG(0);
    packet_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadPacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_id;
        break;
      }
      
      // optional int64 packet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadPacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadPacketRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packet_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadPacketRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional int64 packet_id = 2;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadPacketRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadPacketRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadPacketRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadPacketRequest::MergeFrom(const DownloadPacketRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(1)) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadPacketRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadPacketRequest::CopyFrom(const DownloadPacketRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadPacketRequest::IsInitialized() const {
  
  return true;
}

void DownloadPacketRequest::Swap(DownloadPacketRequest* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadPacketRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadPacketRequest_descriptor_;
  metadata.reflection = DownloadPacketRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownloadPacketResponse::_default_packet_payload_;
#ifndef _MSC_VER
const int DownloadPacketResponse::kErrorCodeFieldNumber;
const int DownloadPacketResponse::kPacketPayloadFieldNumber;
#endif  // !_MSC_VER

DownloadPacketResponse::DownloadPacketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadPacketResponse::InitAsDefaultInstance() {
}

DownloadPacketResponse::DownloadPacketResponse(const DownloadPacketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadPacketResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = -1;
  packet_payload_ = const_cast< ::std::string*>(&_default_packet_payload_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadPacketResponse::~DownloadPacketResponse() {
  SharedDtor();
}

void DownloadPacketResponse::SharedDtor() {
  if (packet_payload_ != &_default_packet_payload_) {
    delete packet_payload_;
  }
  if (this != default_instance_) {
  }
}

void DownloadPacketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadPacketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadPacketResponse_descriptor_;
}

const DownloadPacketResponse& DownloadPacketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

DownloadPacketResponse* DownloadPacketResponse::default_instance_ = NULL;

DownloadPacketResponse* DownloadPacketResponse::New() const {
  return new DownloadPacketResponse;
}

void DownloadPacketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = -1;
    if (_has_bit(1)) {
      if (packet_payload_ != &_default_packet_payload_) {
        packet_payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadPacketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.streaming.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (poppy::streaming::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< poppy::streaming::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet_payload;
        break;
      }
      
      // optional bytes packet_payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadPacketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  // optional bytes packet_payload = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->packet_payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadPacketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  // optional bytes packet_payload = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->packet_payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadPacketResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .poppy.streaming.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
    // optional bytes packet_payload = 2;
    if (has_packet_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadPacketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadPacketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadPacketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadPacketResponse::MergeFrom(const DownloadPacketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
    if (from._has_bit(1)) {
      set_packet_payload(from.packet_payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadPacketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadPacketResponse::CopyFrom(const DownloadPacketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadPacketResponse::IsInitialized() const {
  
  return true;
}

void DownloadPacketResponse::Swap(DownloadPacketResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(packet_payload_, other->packet_payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadPacketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadPacketResponse_descriptor_;
  metadata.reflection = DownloadPacketResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UploadPacketRequest::_default_packet_payload_;
#ifndef _MSC_VER
const int UploadPacketRequest::kStreamIdFieldNumber;
const int UploadPacketRequest::kPacketIdFieldNumber;
const int UploadPacketRequest::kPacketPayloadFieldNumber;
#endif  // !_MSC_VER

UploadPacketRequest::UploadPacketRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadPacketRequest::InitAsDefaultInstance() {
}

UploadPacketRequest::UploadPacketRequest(const UploadPacketRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadPacketRequest::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  packet_id_ = GOOGLE_LONGLONG(0);
  packet_payload_ = const_cast< ::std::string*>(&_default_packet_payload_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadPacketRequest::~UploadPacketRequest() {
  SharedDtor();
}

void UploadPacketRequest::SharedDtor() {
  if (packet_payload_ != &_default_packet_payload_) {
    delete packet_payload_;
  }
  if (this != default_instance_) {
  }
}

void UploadPacketRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadPacketRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadPacketRequest_descriptor_;
}

const UploadPacketRequest& UploadPacketRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

UploadPacketRequest* UploadPacketRequest::default_instance_ = NULL;

UploadPacketRequest* UploadPacketRequest::New() const {
  return new UploadPacketRequest;
}

void UploadPacketRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stream_id_ = GOOGLE_LONGLONG(0);
    packet_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (packet_payload_ != &_default_packet_payload_) {
        packet_payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadPacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stream_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_id;
        break;
      }
      
      // optional int64 packet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packet_payload;
        break;
      }
      
      // optional bytes packet_payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadPacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_id(), output);
  }
  
  // optional bytes packet_payload = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->packet_payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadPacketRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 stream_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }
  
  // optional int64 packet_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packet_id(), target);
  }
  
  // optional bytes packet_payload = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->packet_payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadPacketRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stream_id());
    }
    
    // optional int64 packet_id = 2;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_id());
    }
    
    // optional bytes packet_payload = 3;
    if (has_packet_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadPacketRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadPacketRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadPacketRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadPacketRequest::MergeFrom(const UploadPacketRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stream_id(from.stream_id());
    }
    if (from._has_bit(1)) {
      set_packet_id(from.packet_id());
    }
    if (from._has_bit(2)) {
      set_packet_payload(from.packet_payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadPacketRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadPacketRequest::CopyFrom(const UploadPacketRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadPacketRequest::IsInitialized() const {
  
  return true;
}

void UploadPacketRequest::Swap(UploadPacketRequest* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(packet_id_, other->packet_id_);
    std::swap(packet_payload_, other->packet_payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadPacketRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadPacketRequest_descriptor_;
  metadata.reflection = UploadPacketRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadPacketResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UploadPacketResponse::UploadPacketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadPacketResponse::InitAsDefaultInstance() {
}

UploadPacketResponse::UploadPacketResponse(const UploadPacketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadPacketResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadPacketResponse::~UploadPacketResponse() {
  SharedDtor();
}

void UploadPacketResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadPacketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadPacketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadPacketResponse_descriptor_;
}

const UploadPacketResponse& UploadPacketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_streaming_5fservice_2eproto();  return *default_instance_;
}

UploadPacketResponse* UploadPacketResponse::default_instance_ = NULL;

UploadPacketResponse* UploadPacketResponse::New() const {
  return new UploadPacketResponse;
}

void UploadPacketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadPacketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .poppy.streaming.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (poppy::streaming::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< poppy::streaming::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadPacketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadPacketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .poppy.streaming.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadPacketResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .poppy.streaming.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadPacketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadPacketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadPacketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadPacketResponse::MergeFrom(const UploadPacketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadPacketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadPacketResponse::CopyFrom(const UploadPacketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadPacketResponse::IsInitialized() const {
  
  return true;
}

void UploadPacketResponse::Swap(UploadPacketResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadPacketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadPacketResponse_descriptor_;
  metadata.reflection = UploadPacketResponse_reflection_;
  return metadata;
}


// ===================================================================

StreamingService::~StreamingService() {}

const ::google::protobuf::ServiceDescriptor* StreamingService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* StreamingService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingService_descriptor_;
}

void StreamingService::CreateInputStream(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::CreateStreamRequest*,
                         ::poppy::streaming::CreateStreamResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateInputStream() not implemented.");
  done->Run();
}

void StreamingService::CreateOutputStream(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::CreateStreamRequest*,
                         ::poppy::streaming::CreateStreamResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateOutputStream() not implemented.");
  done->Run();
}

void StreamingService::CloseInputStream(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::CloseStreamRequest*,
                         ::poppy::streaming::CloseStreamResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CloseInputStream() not implemented.");
  done->Run();
}

void StreamingService::CloseOutputStream(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::CloseStreamRequest*,
                         ::poppy::streaming::CloseStreamResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CloseOutputStream() not implemented.");
  done->Run();
}

void StreamingService::DownloadPacket(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::DownloadPacketRequest*,
                         ::poppy::streaming::DownloadPacketResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DownloadPacket() not implemented.");
  done->Run();
}

void StreamingService::UploadPacket(::google::protobuf::RpcController* controller,
                         const ::poppy::streaming::UploadPacketRequest*,
                         ::poppy::streaming::UploadPacketResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadPacket() not implemented.");
  done->Run();
}

void StreamingService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), StreamingService_descriptor_);
  switch(method->index()) {
    case 0:
      CreateInputStream(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::CreateStreamRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::CreateStreamResponse*>(response),
             done);
      break;
    case 1:
      CreateOutputStream(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::CreateStreamRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::CreateStreamResponse*>(response),
             done);
      break;
    case 2:
      CloseInputStream(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::CloseStreamRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::CloseStreamResponse*>(response),
             done);
      break;
    case 3:
      CloseOutputStream(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::CloseStreamRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::CloseStreamResponse*>(response),
             done);
      break;
    case 4:
      DownloadPacket(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::DownloadPacketRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::DownloadPacketResponse*>(response),
             done);
      break;
    case 5:
      UploadPacket(controller,
             ::google::protobuf::down_cast<const ::poppy::streaming::UploadPacketRequest*>(request),
             ::google::protobuf::down_cast< ::poppy::streaming::UploadPacketResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& StreamingService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::poppy::streaming::CreateStreamRequest::default_instance();
    case 1:
      return ::poppy::streaming::CreateStreamRequest::default_instance();
    case 2:
      return ::poppy::streaming::CloseStreamRequest::default_instance();
    case 3:
      return ::poppy::streaming::CloseStreamRequest::default_instance();
    case 4:
      return ::poppy::streaming::DownloadPacketRequest::default_instance();
    case 5:
      return ::poppy::streaming::UploadPacketRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& StreamingService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::poppy::streaming::CreateStreamResponse::default_instance();
    case 1:
      return ::poppy::streaming::CreateStreamResponse::default_instance();
    case 2:
      return ::poppy::streaming::CloseStreamResponse::default_instance();
    case 3:
      return ::poppy::streaming::CloseStreamResponse::default_instance();
    case 4:
      return ::poppy::streaming::DownloadPacketResponse::default_instance();
    case 5:
      return ::poppy::streaming::UploadPacketResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

StreamingService_Stub::StreamingService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StreamingService_Stub::StreamingService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
StreamingService_Stub::~StreamingService_Stub() {
  if (owns_channel_) delete channel_;
}

void StreamingService_Stub::CreateInputStream(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::CreateStreamRequest* request,
                              ::poppy::streaming::CreateStreamResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StreamingService_Stub::CreateOutputStream(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::CreateStreamRequest* request,
                              ::poppy::streaming::CreateStreamResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void StreamingService_Stub::CloseInputStream(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::CloseStreamRequest* request,
                              ::poppy::streaming::CloseStreamResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void StreamingService_Stub::CloseOutputStream(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::CloseStreamRequest* request,
                              ::poppy::streaming::CloseStreamResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void StreamingService_Stub::DownloadPacket(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::DownloadPacketRequest* request,
                              ::poppy::streaming::DownloadPacketResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void StreamingService_Stub::UploadPacket(::google::protobuf::RpcController* controller,
                              const ::poppy::streaming::UploadPacketRequest* request,
                              ::poppy::streaming::UploadPacketResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace streaming
}  // namespace poppy

// @@protoc_insertion_point(global_scope)
