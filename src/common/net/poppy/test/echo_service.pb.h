// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/net/poppy/test/echo_service.proto

#ifndef PROTOBUF_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto__INCLUDED
#define PROTOBUF_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
#include "common/net/poppy/rpc_option.pb.h"
// @@protoc_insertion_point(includes)

namespace rpc_examples {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
void protobuf_AssignDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
void protobuf_ShutdownFile_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();

class EchoRequest;
class EchoResponse;

// ===================================================================

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();
  
  EchoRequest(const EchoRequest& from);
  
  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();
  
  void Swap(EchoRequest* other);
  
  // implements Message ----------------------------------------------
  
  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:rpc_examples.EchoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  friend void protobuf_AssignDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  friend void protobuf_ShutdownFile_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();
  
  EchoResponse(const EchoResponse& from);
  
  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();
  
  void Swap(EchoResponse* other);
  
  // implements Message ----------------------------------------------
  
  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:rpc_examples.EchoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  friend void protobuf_AssignDesc_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  friend void protobuf_ShutdownFile_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// ===================================================================

class EchoServer_Stub;

class EchoServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoServer() {};
 public:
  virtual ~EchoServer();
  
  typedef EchoServer_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Set(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoServer);
};

class EchoServer_Stub : public EchoServer {
 public:
  EchoServer_Stub(::google::protobuf::RpcChannel* channel);
  EchoServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoServer_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements EchoServer ------------------------------------------
  
  void Echo(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void Set(::google::protobuf::RpcController* controller,
                       const ::rpc_examples::EchoRequest* request,
                       ::rpc_examples::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoServer_Stub);
};


// ===================================================================


// ===================================================================

// EchoRequest

// required string user = 1;
inline bool EchoRequest::has_user() const {
  return _has_bit(0);
}
inline void EchoRequest::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EchoRequest::user() const {
  return *user_;
}
inline void EchoRequest::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void EchoRequest::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void EchoRequest::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRequest::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string message = 2;
inline bool EchoRequest::has_message() const {
  return _has_bit(1);
}
inline void EchoRequest::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& EchoRequest::message() const {
  return *message_;
}
inline void EchoRequest::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoRequest::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoRequest::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRequest::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// EchoResponse

// required string user = 1;
inline bool EchoResponse::has_user() const {
  return _has_bit(0);
}
inline void EchoResponse::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EchoResponse::user() const {
  return *user_;
}
inline void EchoResponse::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void EchoResponse::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void EchoResponse::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoResponse::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string message = 2;
inline bool EchoResponse::has_message() const {
  return _has_bit(1);
}
inline void EchoResponse::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& EchoResponse::message() const {
  return *message_;
}
inline void EchoResponse::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoResponse::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoResponse::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoResponse::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_examples

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fnet_2fpoppy_2ftest_2fecho_5fservice_2eproto__INCLUDED
