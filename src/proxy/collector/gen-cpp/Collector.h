/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Collector_H
#define Collector_H

#include <thrift/TDispatchProcessor.h>
#include "collector_types.h"



class CollectorIf {
 public:
  virtual ~CollectorIf() {}
  virtual int32_t Helloworld() = 0;
};

class CollectorIfFactory {
 public:
  typedef CollectorIf Handler;

  virtual ~CollectorIfFactory() {}

  virtual CollectorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CollectorIf* /* handler */) = 0;
};

class CollectorIfSingletonFactory : virtual public CollectorIfFactory {
 public:
  CollectorIfSingletonFactory(const boost::shared_ptr<CollectorIf>& iface) : iface_(iface) {}
  virtual ~CollectorIfSingletonFactory() {}

  virtual CollectorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CollectorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CollectorIf> iface_;
};

class CollectorNull : virtual public CollectorIf {
 public:
  virtual ~CollectorNull() {}
  int32_t Helloworld() {
    int32_t _return = 0;
    return _return;
  }
};


class Collector_Helloworld_args {
 public:

  Collector_Helloworld_args() {
  }

  virtual ~Collector_Helloworld_args() throw() {}


  bool operator == (const Collector_Helloworld_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collector_Helloworld_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collector_Helloworld_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collector_Helloworld_pargs {
 public:


  virtual ~Collector_Helloworld_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collector_Helloworld_result__isset {
  _Collector_Helloworld_result__isset() : success(false) {}
  bool success;
} _Collector_Helloworld_result__isset;

class Collector_Helloworld_result {
 public:

  Collector_Helloworld_result() : success(0) {
  }

  virtual ~Collector_Helloworld_result() throw() {}

  int32_t success;

  _Collector_Helloworld_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Collector_Helloworld_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collector_Helloworld_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collector_Helloworld_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collector_Helloworld_presult__isset {
  _Collector_Helloworld_presult__isset() : success(false) {}
  bool success;
} _Collector_Helloworld_presult__isset;

class Collector_Helloworld_presult {
 public:


  virtual ~Collector_Helloworld_presult() throw() {}

  int32_t* success;

  _Collector_Helloworld_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CollectorClient : virtual public CollectorIf {
 public:
  CollectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CollectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Helloworld();
  void send_Helloworld();
  int32_t recv_Helloworld();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CollectorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CollectorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CollectorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Helloworld(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CollectorProcessor(boost::shared_ptr<CollectorIf> iface) :
    iface_(iface) {
    processMap_["Helloworld"] = &CollectorProcessor::process_Helloworld;
  }

  virtual ~CollectorProcessor() {}
};

class CollectorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CollectorProcessorFactory(const ::boost::shared_ptr< CollectorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CollectorIfFactory > handlerFactory_;
};

class CollectorMultiface : virtual public CollectorIf {
 public:
  CollectorMultiface(std::vector<boost::shared_ptr<CollectorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CollectorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CollectorIf> > ifaces_;
  CollectorMultiface() {}
  void add(boost::shared_ptr<CollectorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Helloworld() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Helloworld();
    }
    return ifaces_[i]->Helloworld();
  }

};



#endif
