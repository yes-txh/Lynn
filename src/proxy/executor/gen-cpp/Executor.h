/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Executor_H
#define Executor_H

#include <thrift/TDispatchProcessor.h>
#include "executor_types.h"



class ExecutorIf {
 public:
  virtual ~ExecutorIf() {}
  virtual int32_t Helloworld() = 0;
  virtual void SendVMHeartbeat(const std::string& heartbeat_ad) = 0;
  virtual bool StartTask(const std::string& task_ad) = 0;
  virtual bool StopTask(const int32_t job_id, const int32_t task_id) = 0;
  virtual bool KillTask(const int32_t job_id, const int32_t task_id) = 0;
};

class ExecutorIfFactory {
 public:
  typedef ExecutorIf Handler;

  virtual ~ExecutorIfFactory() {}

  virtual ExecutorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExecutorIf* /* handler */) = 0;
};

class ExecutorIfSingletonFactory : virtual public ExecutorIfFactory {
 public:
  ExecutorIfSingletonFactory(const boost::shared_ptr<ExecutorIf>& iface) : iface_(iface) {}
  virtual ~ExecutorIfSingletonFactory() {}

  virtual ExecutorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExecutorIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExecutorIf> iface_;
};

class ExecutorNull : virtual public ExecutorIf {
 public:
  virtual ~ExecutorNull() {}
  int32_t Helloworld() {
    int32_t _return = 0;
    return _return;
  }
  void SendVMHeartbeat(const std::string& /* heartbeat_ad */) {
    return;
  }
  bool StartTask(const std::string& /* task_ad */) {
    bool _return = false;
    return _return;
  }
  bool StopTask(const int32_t /* job_id */, const int32_t /* task_id */) {
    bool _return = false;
    return _return;
  }
  bool KillTask(const int32_t /* job_id */, const int32_t /* task_id */) {
    bool _return = false;
    return _return;
  }
};


class Executor_Helloworld_args {
 public:

  Executor_Helloworld_args() {
  }

  virtual ~Executor_Helloworld_args() throw() {}


  bool operator == (const Executor_Helloworld_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Executor_Helloworld_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_Helloworld_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_Helloworld_pargs {
 public:


  virtual ~Executor_Helloworld_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_Helloworld_result__isset {
  _Executor_Helloworld_result__isset() : success(false) {}
  bool success;
} _Executor_Helloworld_result__isset;

class Executor_Helloworld_result {
 public:

  Executor_Helloworld_result() : success(0) {
  }

  virtual ~Executor_Helloworld_result() throw() {}

  int32_t success;

  _Executor_Helloworld_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Executor_Helloworld_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executor_Helloworld_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_Helloworld_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_Helloworld_presult__isset {
  _Executor_Helloworld_presult__isset() : success(false) {}
  bool success;
} _Executor_Helloworld_presult__isset;

class Executor_Helloworld_presult {
 public:


  virtual ~Executor_Helloworld_presult() throw() {}

  int32_t* success;

  _Executor_Helloworld_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Executor_SendVMHeartbeat_args__isset {
  _Executor_SendVMHeartbeat_args__isset() : heartbeat_ad(false) {}
  bool heartbeat_ad;
} _Executor_SendVMHeartbeat_args__isset;

class Executor_SendVMHeartbeat_args {
 public:

  Executor_SendVMHeartbeat_args() : heartbeat_ad() {
  }

  virtual ~Executor_SendVMHeartbeat_args() throw() {}

  std::string heartbeat_ad;

  _Executor_SendVMHeartbeat_args__isset __isset;

  void __set_heartbeat_ad(const std::string& val) {
    heartbeat_ad = val;
  }

  bool operator == (const Executor_SendVMHeartbeat_args & rhs) const
  {
    if (!(heartbeat_ad == rhs.heartbeat_ad))
      return false;
    return true;
  }
  bool operator != (const Executor_SendVMHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_SendVMHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_SendVMHeartbeat_pargs {
 public:


  virtual ~Executor_SendVMHeartbeat_pargs() throw() {}

  const std::string* heartbeat_ad;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_SendVMHeartbeat_result {
 public:

  Executor_SendVMHeartbeat_result() {
  }

  virtual ~Executor_SendVMHeartbeat_result() throw() {}


  bool operator == (const Executor_SendVMHeartbeat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Executor_SendVMHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_SendVMHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_SendVMHeartbeat_presult {
 public:


  virtual ~Executor_SendVMHeartbeat_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Executor_StartTask_args__isset {
  _Executor_StartTask_args__isset() : task_ad(false) {}
  bool task_ad;
} _Executor_StartTask_args__isset;

class Executor_StartTask_args {
 public:

  Executor_StartTask_args() : task_ad() {
  }

  virtual ~Executor_StartTask_args() throw() {}

  std::string task_ad;

  _Executor_StartTask_args__isset __isset;

  void __set_task_ad(const std::string& val) {
    task_ad = val;
  }

  bool operator == (const Executor_StartTask_args & rhs) const
  {
    if (!(task_ad == rhs.task_ad))
      return false;
    return true;
  }
  bool operator != (const Executor_StartTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_StartTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_StartTask_pargs {
 public:


  virtual ~Executor_StartTask_pargs() throw() {}

  const std::string* task_ad;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_StartTask_result__isset {
  _Executor_StartTask_result__isset() : success(false) {}
  bool success;
} _Executor_StartTask_result__isset;

class Executor_StartTask_result {
 public:

  Executor_StartTask_result() : success(0) {
  }

  virtual ~Executor_StartTask_result() throw() {}

  bool success;

  _Executor_StartTask_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Executor_StartTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executor_StartTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_StartTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_StartTask_presult__isset {
  _Executor_StartTask_presult__isset() : success(false) {}
  bool success;
} _Executor_StartTask_presult__isset;

class Executor_StartTask_presult {
 public:


  virtual ~Executor_StartTask_presult() throw() {}

  bool* success;

  _Executor_StartTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Executor_StopTask_args__isset {
  _Executor_StopTask_args__isset() : job_id(false), task_id(false) {}
  bool job_id;
  bool task_id;
} _Executor_StopTask_args__isset;

class Executor_StopTask_args {
 public:

  Executor_StopTask_args() : job_id(0), task_id(0) {
  }

  virtual ~Executor_StopTask_args() throw() {}

  int32_t job_id;
  int32_t task_id;

  _Executor_StopTask_args__isset __isset;

  void __set_job_id(const int32_t val) {
    job_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Executor_StopTask_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Executor_StopTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_StopTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_StopTask_pargs {
 public:


  virtual ~Executor_StopTask_pargs() throw() {}

  const int32_t* job_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_StopTask_result__isset {
  _Executor_StopTask_result__isset() : success(false) {}
  bool success;
} _Executor_StopTask_result__isset;

class Executor_StopTask_result {
 public:

  Executor_StopTask_result() : success(0) {
  }

  virtual ~Executor_StopTask_result() throw() {}

  bool success;

  _Executor_StopTask_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Executor_StopTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executor_StopTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_StopTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_StopTask_presult__isset {
  _Executor_StopTask_presult__isset() : success(false) {}
  bool success;
} _Executor_StopTask_presult__isset;

class Executor_StopTask_presult {
 public:


  virtual ~Executor_StopTask_presult() throw() {}

  bool* success;

  _Executor_StopTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Executor_KillTask_args__isset {
  _Executor_KillTask_args__isset() : job_id(false), task_id(false) {}
  bool job_id;
  bool task_id;
} _Executor_KillTask_args__isset;

class Executor_KillTask_args {
 public:

  Executor_KillTask_args() : job_id(0), task_id(0) {
  }

  virtual ~Executor_KillTask_args() throw() {}

  int32_t job_id;
  int32_t task_id;

  _Executor_KillTask_args__isset __isset;

  void __set_job_id(const int32_t val) {
    job_id = val;
  }

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const Executor_KillTask_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Executor_KillTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_KillTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executor_KillTask_pargs {
 public:


  virtual ~Executor_KillTask_pargs() throw() {}

  const int32_t* job_id;
  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_KillTask_result__isset {
  _Executor_KillTask_result__isset() : success(false) {}
  bool success;
} _Executor_KillTask_result__isset;

class Executor_KillTask_result {
 public:

  Executor_KillTask_result() : success(0) {
  }

  virtual ~Executor_KillTask_result() throw() {}

  bool success;

  _Executor_KillTask_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Executor_KillTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executor_KillTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executor_KillTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executor_KillTask_presult__isset {
  _Executor_KillTask_presult__isset() : success(false) {}
  bool success;
} _Executor_KillTask_presult__isset;

class Executor_KillTask_presult {
 public:


  virtual ~Executor_KillTask_presult() throw() {}

  bool* success;

  _Executor_KillTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExecutorClient : virtual public ExecutorIf {
 public:
  ExecutorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExecutorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Helloworld();
  void send_Helloworld();
  int32_t recv_Helloworld();
  void SendVMHeartbeat(const std::string& heartbeat_ad);
  void send_SendVMHeartbeat(const std::string& heartbeat_ad);
  void recv_SendVMHeartbeat();
  bool StartTask(const std::string& task_ad);
  void send_StartTask(const std::string& task_ad);
  bool recv_StartTask();
  bool StopTask(const int32_t job_id, const int32_t task_id);
  void send_StopTask(const int32_t job_id, const int32_t task_id);
  bool recv_StopTask();
  bool KillTask(const int32_t job_id, const int32_t task_id);
  void send_KillTask(const int32_t job_id, const int32_t task_id);
  bool recv_KillTask();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExecutorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExecutorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExecutorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Helloworld(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendVMHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KillTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExecutorProcessor(boost::shared_ptr<ExecutorIf> iface) :
    iface_(iface) {
    processMap_["Helloworld"] = &ExecutorProcessor::process_Helloworld;
    processMap_["SendVMHeartbeat"] = &ExecutorProcessor::process_SendVMHeartbeat;
    processMap_["StartTask"] = &ExecutorProcessor::process_StartTask;
    processMap_["StopTask"] = &ExecutorProcessor::process_StopTask;
    processMap_["KillTask"] = &ExecutorProcessor::process_KillTask;
  }

  virtual ~ExecutorProcessor() {}
};

class ExecutorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExecutorProcessorFactory(const ::boost::shared_ptr< ExecutorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExecutorIfFactory > handlerFactory_;
};

class ExecutorMultiface : virtual public ExecutorIf {
 public:
  ExecutorMultiface(std::vector<boost::shared_ptr<ExecutorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExecutorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExecutorIf> > ifaces_;
  ExecutorMultiface() {}
  void add(boost::shared_ptr<ExecutorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Helloworld() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Helloworld();
    }
    return ifaces_[i]->Helloworld();
  }

  void SendVMHeartbeat(const std::string& heartbeat_ad) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendVMHeartbeat(heartbeat_ad);
    }
    ifaces_[i]->SendVMHeartbeat(heartbeat_ad);
  }

  bool StartTask(const std::string& task_ad) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartTask(task_ad);
    }
    return ifaces_[i]->StartTask(task_ad);
  }

  bool StopTask(const int32_t job_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopTask(job_id, task_id);
    }
    return ifaces_[i]->StopTask(job_id, task_id);
  }

  bool KillTask(const int32_t job_id, const int32_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KillTask(job_id, task_id);
    }
    return ifaces_[i]->KillTask(job_id, task_id);
  }

};



#endif
