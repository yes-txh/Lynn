/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Scheduler_H
#define Scheduler_H

#include <thrift/TDispatchProcessor.h>
#include "scheduler_types.h"



class SchedulerIf {
 public:
  virtual ~SchedulerIf() {}
  virtual int64_t SubmitJob(const std::string& job_ad) = 0;
  virtual bool ReportTaskState(const int64_t job_id, const int64_t task_id, const TaskState::type state) = 0;
};

class SchedulerIfFactory {
 public:
  typedef SchedulerIf Handler;

  virtual ~SchedulerIfFactory() {}

  virtual SchedulerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SchedulerIf* /* handler */) = 0;
};

class SchedulerIfSingletonFactory : virtual public SchedulerIfFactory {
 public:
  SchedulerIfSingletonFactory(const boost::shared_ptr<SchedulerIf>& iface) : iface_(iface) {}
  virtual ~SchedulerIfSingletonFactory() {}

  virtual SchedulerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SchedulerIf* /* handler */) {}

 protected:
  boost::shared_ptr<SchedulerIf> iface_;
};

class SchedulerNull : virtual public SchedulerIf {
 public:
  virtual ~SchedulerNull() {}
  int64_t SubmitJob(const std::string& /* job_ad */) {
    int64_t _return = 0;
    return _return;
  }
  bool ReportTaskState(const int64_t /* job_id */, const int64_t /* task_id */, const TaskState::type /* state */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Scheduler_SubmitJob_args__isset {
  _Scheduler_SubmitJob_args__isset() : job_ad(false) {}
  bool job_ad;
} _Scheduler_SubmitJob_args__isset;

class Scheduler_SubmitJob_args {
 public:

  Scheduler_SubmitJob_args() : job_ad() {
  }

  virtual ~Scheduler_SubmitJob_args() throw() {}

  std::string job_ad;

  _Scheduler_SubmitJob_args__isset __isset;

  void __set_job_ad(const std::string& val) {
    job_ad = val;
  }

  bool operator == (const Scheduler_SubmitJob_args & rhs) const
  {
    if (!(job_ad == rhs.job_ad))
      return false;
    return true;
  }
  bool operator != (const Scheduler_SubmitJob_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_SubmitJob_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Scheduler_SubmitJob_pargs {
 public:


  virtual ~Scheduler_SubmitJob_pargs() throw() {}

  const std::string* job_ad;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_SubmitJob_result__isset {
  _Scheduler_SubmitJob_result__isset() : success(false) {}
  bool success;
} _Scheduler_SubmitJob_result__isset;

class Scheduler_SubmitJob_result {
 public:

  Scheduler_SubmitJob_result() : success(0) {
  }

  virtual ~Scheduler_SubmitJob_result() throw() {}

  int64_t success;

  _Scheduler_SubmitJob_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const Scheduler_SubmitJob_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Scheduler_SubmitJob_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_SubmitJob_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_SubmitJob_presult__isset {
  _Scheduler_SubmitJob_presult__isset() : success(false) {}
  bool success;
} _Scheduler_SubmitJob_presult__isset;

class Scheduler_SubmitJob_presult {
 public:


  virtual ~Scheduler_SubmitJob_presult() throw() {}

  int64_t* success;

  _Scheduler_SubmitJob_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Scheduler_ReportTaskState_args__isset {
  _Scheduler_ReportTaskState_args__isset() : job_id(false), task_id(false), state(false) {}
  bool job_id;
  bool task_id;
  bool state;
} _Scheduler_ReportTaskState_args__isset;

class Scheduler_ReportTaskState_args {
 public:

  Scheduler_ReportTaskState_args() : job_id(0), task_id(0), state((TaskState::type)0) {
  }

  virtual ~Scheduler_ReportTaskState_args() throw() {}

  int64_t job_id;
  int64_t task_id;
  TaskState::type state;

  _Scheduler_ReportTaskState_args__isset __isset;

  void __set_job_id(const int64_t val) {
    job_id = val;
  }

  void __set_task_id(const int64_t val) {
    task_id = val;
  }

  void __set_state(const TaskState::type val) {
    state = val;
  }

  bool operator == (const Scheduler_ReportTaskState_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(task_id == rhs.task_id))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Scheduler_ReportTaskState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_ReportTaskState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Scheduler_ReportTaskState_pargs {
 public:


  virtual ~Scheduler_ReportTaskState_pargs() throw() {}

  const int64_t* job_id;
  const int64_t* task_id;
  const TaskState::type* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_ReportTaskState_result__isset {
  _Scheduler_ReportTaskState_result__isset() : success(false) {}
  bool success;
} _Scheduler_ReportTaskState_result__isset;

class Scheduler_ReportTaskState_result {
 public:

  Scheduler_ReportTaskState_result() : success(0) {
  }

  virtual ~Scheduler_ReportTaskState_result() throw() {}

  bool success;

  _Scheduler_ReportTaskState_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Scheduler_ReportTaskState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Scheduler_ReportTaskState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_ReportTaskState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_ReportTaskState_presult__isset {
  _Scheduler_ReportTaskState_presult__isset() : success(false) {}
  bool success;
} _Scheduler_ReportTaskState_presult__isset;

class Scheduler_ReportTaskState_presult {
 public:


  virtual ~Scheduler_ReportTaskState_presult() throw() {}

  bool* success;

  _Scheduler_ReportTaskState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SchedulerClient : virtual public SchedulerIf {
 public:
  SchedulerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SchedulerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t SubmitJob(const std::string& job_ad);
  void send_SubmitJob(const std::string& job_ad);
  int64_t recv_SubmitJob();
  bool ReportTaskState(const int64_t job_id, const int64_t task_id, const TaskState::type state);
  void send_ReportTaskState(const int64_t job_id, const int64_t task_id, const TaskState::type state);
  bool recv_ReportTaskState();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SchedulerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SchedulerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SchedulerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SubmitJob(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportTaskState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SchedulerProcessor(boost::shared_ptr<SchedulerIf> iface) :
    iface_(iface) {
    processMap_["SubmitJob"] = &SchedulerProcessor::process_SubmitJob;
    processMap_["ReportTaskState"] = &SchedulerProcessor::process_ReportTaskState;
  }

  virtual ~SchedulerProcessor() {}
};

class SchedulerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SchedulerProcessorFactory(const ::boost::shared_ptr< SchedulerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SchedulerIfFactory > handlerFactory_;
};

class SchedulerMultiface : virtual public SchedulerIf {
 public:
  SchedulerMultiface(std::vector<boost::shared_ptr<SchedulerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SchedulerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SchedulerIf> > ifaces_;
  SchedulerMultiface() {}
  void add(boost::shared_ptr<SchedulerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t SubmitJob(const std::string& job_ad) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SubmitJob(job_ad);
    }
    return ifaces_[i]->SubmitJob(job_ad);
  }

  bool ReportTaskState(const int64_t job_id, const int64_t task_id, const TaskState::type state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportTaskState(job_id, task_id, state);
    }
    return ifaces_[i]->ReportTaskState(job_id, task_id, state);
  }

};



#endif
